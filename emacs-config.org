#+TITLE: Emacs configuration
#+author: Randolph Huang
#+startup: overview
#+hugo_base_dir: /Users/randolph/iCloud/Blog



* Emacs Plus
You can try emacs-plus if you use MacOS.
#+begin_src shell :file-name: temp.sh
brew tap d12frosted/emacs-plus
brew install emacs-plus
ln -s /usr/local/opt/emacs-plus@27/Emacs.app /Applications
#+end_src
* Package Management
** Setup ELPA, MELPA and Org repo
#+begin_src emacs-lisp
(require 'package)
;; (setq package-archives
;;       '(("gnu"       . "https://mirrors.cloud.tencent.com/elpa/gnu/")
;;         ("melpa"     . "https://mirrors.cloud.tencent.com/elpa/melpa/")
;;         ;; ("melpa-stable" . "https://mirrors.cloud.tencent.com/elpa/melpa-stable/")
;;         ("marmalade" . "https://mirrors.cloud.tencent.com/elpa/marmalade/")
;;         ("org"       . "http://orgmode.org/elpa/")
;;         ("nongnu"    . "https://mirrors.cloud.tencent.com/elpa/nongnu/")))

(setq package-archives
      '(("melpa"  . "https://melpa.org/packages/")
        ;; ("melpa-stable" . "http://melpa-stable.milkbox.net/packages/")
        ;; ("marmalade" . "http://marmalade-repo.org/packages/")
        ("gnu"    . "https://elpa.gnu.org/packages/")
        ("org"         . "http://orgmode.org/elpa/")
        ("nongnu" . "https://elpa.nongnu.org/nongnu/")))

(if (version< emacs-version "27")
  (package-initialize))
#+end_src
** Load =use-package= to manage package
#+begin_src emacs-lisp
  ;; Bootstrap `use-package'
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

  ;; Use-package can now be used for itself
  (use-package use-package
    :init
    (setq use-package-always-ensure nil)  ; Try installing automatically
    (setq use-package-always-defer nil)
    (setq use-package-expand-minimally nil)
    (setq use-package-enable-imenu-support t)
    (setq use-package-verbose nil)     ; Set to true when interested in load times
    ;; If running as daemon, there's no reason to defer,just load shite
    ;; to minimize chance of lockup, but it still happens sometimes.
    (if (daemonp)
	(setq use-package-always-demand t))

    (use-package use-package-ensure-system-package :ensure t)   ; Need this because we are in use-package config
    (use-package diminish :ensure t)

    ;; Location where I keep custom packages
    (setq custom-package-directory (concat user-emacs-directory "lisp/")))
#+end_src
** Use-package keywords ordering
Use the following keywords ordering for =use-package=:
- :ensure
- :when
- :quelpa
- :requires
- :defines
- :functions
- :commands
- :demand
- :defer
- :preface
- :init
- :magic
- :hook
- :bind
- :config
- :custom-face
- :custom

** quelpa, some packages for example eaf would be downloaded via quelpa.
#+begin_src emacs-lisp
;; Bootstrap `quelpa'.
(use-package quelpa
  :ensure t
  :config
  (use-package quelpa-use-package :ensure t)  ;; quelpa integration with use-package
  :custom
  (quelpa-update-melpa-p nil)
  (quelpa-self-upgrade-p nil)
  (quelpa-checkout-melpa-p nil))
#+end_src
** Auto update package
#+begin_src emacs-lisp
(use-package auto-package-update
  :ensure t
  :after quelpa ; Solve "quelpa-cache" problem due to: https://github.com/rranelli/auto-package-update.el/issues/44
  :if (not (daemonp))
  :custom
  (auto-package-update-interval 7) ;; in days
  (auto-package-update-prompt-before-update t)
  (auto-package-update-delete-old-versions t)
  (auto-package-update-hide-results t)
  :config
  (auto-package-update-maybe))
#+end_src
* Startup Performance
Make startup faster by reducing the frequency of garbage collection and then use a hook to measure Emacs startup time.
#+begin_src emacs-lisp
;; A big contributor to startup times is garbage collection. We up the gc
;; threshold to temporarily prevent it from running, and then reset it later
;; using a hook.
(setq gc-cons-threshold most-positive-fixnum
      gc-cons-percentage 0.6)

;; Keep a ref to the actual file-name-handler
(defvar default-file-name-handler-alist file-name-handler-alist)

;; Set the file-name-handler to nil (because regexing is cpu intensive)
(setq file-name-handler-alist nil)

;; Reset file-name-handler-alist after initialization
(add-hook 'emacs-startup-hook
  (lambda ()
  ;; The default is 800 kilobytes.  Measured in bytes.
  (setq gc-cons-threshold (* 50 1000 1000)
        gc-cons-percentage 0.1
        file-name-handler-alist default-file-name-handler-alist)))

;; GC optimization
(use-package gcmh
  :ensure t
  :hook (after-init . gcmh-mode)
  :custom
  (gcmh-idle-delay 10)
  (gcmh-high-cons-threshold #x6400000)) ;; 100 MB
#+end_src
* exec-path settings
Only for Mac system.
#+begin_src emacs-lisp
(use-package exec-path-from-shell
  :ensure t
  :when (eq system-type 'darwin)
  :hook (after-init . exec-path-from-shell-initialize))
#+end_src
* Custom file settings
Put custom setting in an independent file instead of in =init.el= file.
#+begin_src emacs-lisp
(setq custom-file "~/.emacs.d/custom.el")
(if (file-exists-p custom-file)
    (load custom-file))
#+end_src
* Native Compilation
#+begin_src emacs-lisp
;; Silence compiler warnings as they can be pretty disruptive
(setq comp-async-report-warnings-errors nil)

;; This tells Emacs not to warn you about anything except problems.
;; By contrast, the default value of warning-minimum-level is :warning.
(setq warning-minimum-level :emergency)
#+end_src

This variable tells Emacs to prefer the =.el= file if it’s newer, even if there is a corresponding =.elc= file. Also, use auto-compile to autocompile files as needed.
#+begin_src emacs-lisp
(setq load-prefer-newer t)
(use-package auto-compile
  :ensure t
  :defer nil
  :config (auto-compile-on-load-mode))
#+end_src

* Network settings
** proxy settings
#+begin_src emacs-lisp
(setq url-proxy-services
      '(("http"  . "127.0.0.1:6152")
        ("https" . "127.0.0.1:6152")))
#+end_src
** with proxy
To make codes using proxy.
#+begin_src emacs-lisp -n
(use-package with-proxy
  :ensure t
  )
#+end_src

To use with-proxy:
#+begin_example
;; 1. 使用默认代理设置
(with-proxy
  ;; 请求代码写在这里
  )

;; 2. 使用自定义代理设置
(with-proxy
  :http-server "127.0.0.1:1081"
  :no-proxy '("localhost" "127.0.0.1" "192.168.*" "10.*")
  ;; 请求代码写在这里
  )
#+end_example

* Const and func definition
** User info
#+begin_src emacs-lisp
(setq user-full-name "Randolph Huang")
(setq user-mail-address "xiaojianghuang@126.com")
;; set default directory to HOME
(setq default-directory (concat (getenv "HOME") "/"))
;; Set the load path to user customized directories
(add-to-list 'load-path "~/.emacs.d/lisp")
#+end_src
** Const definition
#+begin_src emacs-lisp
;; system type definition
(defconst sys/win32p
  (eq system-type 'windows-nt)
  "Are we running on a WinTel system?")

(defconst sys/linuxp
  (eq system-type 'gnu/linux)
  "Are we running on a GNU/Linux system?")

(defconst sys/macp
  (eq system-type 'darwin)
  "Are we running on a Mac system?")

(defconst sys/cygwinp
  (eq system-type 'cygwin)
  "Are we running on a Cygwin system?")
#+end_src
** function definition
#+begin_src emacs-lisp
(defun my/suppress-message (func &rest args)
  "Suppress `message' when apply FUNC with ARGS."
  (let ((inhibit-message t))
    (apply func args)))

(defun my/buffer-auto-close ()
  "Close buffer after exit."
  (when (ignore-errors (get-buffer-process (current-buffer)))
    (set-process-sentinel (get-buffer-process (current-buffer))
                          (lambda (process _exit-msg)
                            (when (memq (process-status process) '(exit stop))
                              (kill-buffer (process-buffer process))
                              (when (> (count-windows) 1)
                                (delete-window)))))))

(defun open-dashboard ()
  "Open the *dashboard* buffer and jump to the first widget."
  (interactive)
  (if (get-buffer dashboard-buffer-name)
      (kill-buffer dashboard-buffer-name))
  (dashboard-insert-startupify-lists)
  (switch-to-buffer dashboard-buffer-name)
  (goto-char (point-min))
  (delete-other-windows))

(defun open-emacsconfig ()
  "Opens emacs-config.org file."
  (interactive)
  (find-file "~/.emacs.d/emacs-config.org"))

(defun save-all-buffers ()
  "Instead of `save-buffer', save all opened buffers by calling `save-some-buffers' with ARG t."
  (interactive)
  (save-some-buffers t))
(global-set-key (kbd "C-x C-s") nil)
(global-set-key (kbd "C-x C-s") #'save-all-buffers)
#+end_src
* Unbind unnecessary keys
#+begin_src emacs-lisp -n
(global-set-key (kbd "C-z") nil)
(global-set-key (kbd "s-q") nil)
(global-set-key (kbd "M-z") nil)
(global-set-key (kbd "M-m") nil)
(global-set-key (kbd "C-x C-z") nil)
(global-set-key (kbd "M-/") nil)
#+end_src
* Encryption
** Authentication sources
The =auth-source= library looks for passwords in a set of sources, by default it looks like:
#+begin_example
~/.authinfo
~/.authinfo.gpg
~/.netrc
#+end_example

App like =Gnus=, =MU4E= will read password information from this file.

-------

You can also to add additional sources such as MacOS keychain("internet" or "generic") to the =auth-source= list.

1. Firstly need to add password to keychain via command line:
#+begin_src shell -n :file-name: temp.sh
security add-internet-password -a huangxj73@midea.com -l smtp.midea.com -P 465 -r smtp -s smtp.midea.com -w "my-password" -U
#+end_src

2. Then set =auth-source=:
#+begin_src emacs-lisp -n
;; (when sys/macp
;;   ;; (add-to-list 'auth-sources 'macos-keychain-internet)
;;   ;; (add-to-list 'auth-sources 'macos-keychain-generic)
;;   (setq auth-sources (quote (macos-keychain-internet macos-keychain-generic)))
;;   )
#+end_src

** Create a recipient for encryption
#+begin_src shell -n :file-name: temp.sh
brew install gpg
gpg --full-generate-key
# select RSA, 4096 keysize, 0 (not expired)
# input real name, email address, commnet
# input passphrase for this GPG encryption file

# check whether succeed
gpg --list-keys
#+end_src

To fix the "gpg: WARNING: unsafe permissions on homedir '/home/path/to/user/.gnupg'" error:
#+begin_src shell -n :file-name: temp.sh
# Make sure that the .gnupg directory and its contents is accessibile by your user.
chown -R $(whoami) ~/.gnupg/

# Also correct the permissions and access rights on the directory
chmod 600 ~/.gnupg/*
chmod 700 ~/.gnupg
#+end_src

** Edit =.authinfo.gpg= file
#+begin_example
machine yoursitename login youremailaccount password yourpassword
#+end_example
** Edit =gpg-agent.conf= file
Edit =gpg-agent.conf= file located in =~/.gnupg/gpg-agent.conf=:
#+begin_example
use-standard-socket
enable-ssh-support
default-cache-ttl 34560000
max-cache-ttl 34560000
pinentry-program /usr/local/bin/pinentry-mac
#+end_example
** Fix Easy-PG
Emacs did not bring up the interface to enter the passphrase for my secret key. See [[https://colinxy.github.io/software-installation/2016/09/24/emacs25-easypg-issue.html][Fix Easy-PG issure in Emacs 25.1]] for details. Even in 27.2, this problem still exists.
#+begin_src emacs-lisp -n
;; (setq epa-pinentry-mode 'loopback)
#+end_src

An alternative solution for macOS is to install =pinentry-mac=:
#+begin_src shell -n :file-name: temp.sh
brew install pinentry-mac
#+end_src
* UI settings
** Basic UI settings
*** Frame settings
#+begin_src emacs-lisp
;; set frame title
(setq frame-title-format
      (list (format "%s %%S: %%j " (system-name))
            '(buffer-file-name "%f" (dired-directory dired-directory "%b"))))

;; set frame size
(setq default-frame-alist
      '((top . 0)
        (left . 80)
        (width . 180)
        (height . 50)))
#+end_src

*** Miscellaneous settings
#+begin_src emacs-lisp
;; Supress GUI features
(setq use-file-dialog nil
      use-dialog-box nil
      inhibit-default-init t
      inhibit-startup-screen t
      inhibit-startup-message t
      inhibit-startup-buffer-menu t)

;; Optimize for very long lines
(setq bidi-paragraph-direction 'left-to-right
      bidi-inhibit-bpa t)

;; default fill lenght to 80
(setq-default fill-column 80)

;; No gc for font caches
(setq inhibit-compacting-font-caches t)

;; Improve display
(setq display-raw-bytes-as-hex t
      redisplay-skip-fontification-on-input t)

;; No annoying bell
(setq ring-bell-function 'ignore)

;; Smooth scroll
(setq scroll-step 2
      scroll-margin 2
      hscroll-step 2
      hscroll-margin 2
      scroll-conservatively 101
      scroll-up-aggressively 0.01
      scroll-down-aggressively 0.01
      scroll-preserve-screen-position 'always)

;; Disable auto vertical scroll for tall lines
(setq auto-window-vscroll nil)

;; split window vertically if it is two wide:
(setq split-width-threshold 140 ;; set to 0 if you want to vertically as default
      split-height-threshold nil)

;; No tabs, use space to replace tab
(setq-default indent-tabs-mode nil)
(setq-default tab-width 4)

;; automatically say yes when confirmation msg matched
(setq original-y-or-n-p 'y-or-n-p)
(defalias 'original-y-or-n-p (symbol-function 'y-or-n-p))
(defun default-yes-sometimes (prompt)
  (if (or
       (string-match "has a running process" prompt)
       (string-match "does not exist; create" prompt)
       (string-match "modified; kill anyway" prompt)
       (string-match "Delete buffer using" prompt)
       (string-match "Kill buffer of" prompt)
	     (string-match "still connected.  Kill it?" prompt)
	     (string-match "Shutdown the client's kernel" prompt)
       (string-match "kill them and exit anyway" prompt)
       (string-match "Revert buffer from file" prompt)
       (string-match "Kill Dired buffer of" prompt)
       (string-match "delete buffer using" prompt))
      t
    (original-y-or-n-p prompt)))
(defalias 'yes-or-no-p 'default-yes-sometimes)
(defalias 'y-or-n-p 'default-yes-sometimes)

;; set kill ring to 200, default is 60
(setq kill-ring-max 200)

;; set mark ring shorter to make jump more easier. Default value is 16
;; and you can use `counsel-mark-ring' (C-x j) to view all mark rings.
(setq mark-ring-max 6)
(setq global-mark-ring-max 6)

(setq max-lisp-eval-depth 10000) ;; default is 800
(setq max-specpdl-size 10000) ;; default is 1600

;; Enable the disabled dired commands
(put 'dired-find-alternate-file 'disabled nil)

;; Enable the disabled `list-timers', `list-threads' commands
(put 'list-timers 'disabled nil)
(put 'list-threads 'disabled nil)
#+end_src

*** Menubar settings
Keep clean but enable =menu-bar= in MacOS.
#+begin_src emacs-lisp -n
(when (and (fboundp 'menu-bar-mode) (not (eq system-type 'darwin)))
  (menu-bar-mode -1))
(when (fboundp 'tool-bar-mode)
  (tool-bar-mode -1))
(when (fboundp 'set-scroll-bar-mode)
  (set-scroll-bar-mode nil))
#+end_src

*** Directly modify when selected
#+begin_src emacs-lisp -n
(use-package delsel
  :ensure nil
  :hook (after-init . delete-selection-mode))
#+end_src

*** Better word wrapping for CJK characters
#+begin_src emacs-lisp -n
(use-package text-mode
  :ensure nil
  :custom
  ;; better word wrapping for CJK characters
  (word-wrap-by-category t)
  ;; paragraphs
  (sentence-end "\\([，。、！？]\\|……\\|[,.?!][]\"')}]*\\($\\|[ \t]\\)\\)[ \t\n]*")
  (sentence-end-double-space nil))
#+end_src

*** Escape settings in minibuffer
Make escape key more nature in minibuffer.
#+begin_src emacs-lisp -n
(use-package minibuffer
  :ensure nil
  :bind (:map minibuffer-local-map
              ([escape] . abort-recursive-edit)
              :map minibuffer-local-ns-map
              ([escape] . abort-recursive-edit)
              :map minibuffer-local-completion-map
              ([escape] . abort-recursive-edit)
              :map minibuffer-local-must-match-map
              ([escape] . abort-recursive-edit)
              :map minibuffer-local-isearch-map
              ([escape] . abort-recursive-edit))
  :custom
  (minibuffer-eldef-shorten-default t)
  (minibuffer-electric-default-mode t)
  (minibuffer-depth-indicate-mode t)
  (enable-recursive-minibuffers t))
#+end_src

*** Save place
Back to previous position.
#+begin_src emacs-lisp -n
(use-package saveplace
  :ensure nil
  :hook (after-init . save-place-mode))
#+end_src

*** Subword settings
Make word editing and motion more fine-grained.
#+begin_src emacs-lisp -n
(use-package subword
  :ensure nil
  :diminish subword-mode
  ;; need to load after diminish so it gets diminished
  :after (diminish)
  :init
  (global-subword-mode))
#+end_src

*** Line number settings
Don't show line numbers always. Enable when nessecery.
#+begin_src emacs-lisp
(column-number-mode)
(setq display-line-numbers-type 'relative)

;; Enable line numbers for some modes
(dolist (mode '(text-mode-hook
                prog-mode-hook
                conf-mode-hook))
  (add-hook mode (lambda () (setq-local display-line-numbers-mode 1))))

;; when C-c ' to edit src code, show line numbers
(add-hook 'org-src-mode-hook 'display-line-numbers-mode)
;; when in org file, don't show line numbers
(dolist (mode '(org-mode-hook))
  (add-hook mode (lambda () (setq-local display-line-numbers-mode 0))))

;; page-break-lines
(use-package page-break-lines
  :ensure t
  :hook (after-init . global-page-break-lines-mode))
#+end_src
** Center some modes
Here we center org mode to make org more like a modern editor.
#+begin_src emacs-lisp -n
(use-package visual-fill-column
  :ensure t
  :defer t
  :hook (org-mode . my/org-mode-visual-fill)
  :config
  (defun my/org-mode-visual-fill ()
    (setq visual-fill-column-width 110
          visual-fill-column-center-text t)
    (visual-fill-column-mode 1))
  )
#+end_src
** Prettify symbols
#+begin_src emacs-lisp
(global-prettify-symbols-mode 1)
(defun add-pretty-lambda ()
  "Make some word or string show as pretty Unicode symbols.  See https://unicodelookup.com for more."
  (setq prettify-symbols-alist
        '(
          ("lambda" . 955)
          ("delta" . 120517)
          ("epsilon" . 120518)
          ("->" . 8594)
          ("<=" . 8804)
          (">=" . 8805)
          )))
(add-hook 'prog-mode-hook 'add-pretty-lambda)
(add-hook 'org-mode-hook 'add-pretty-lambda)
#+end_src
** Font settings
Need to install =source code pro= and =WenQuanYi Zen Hei Mono= font.
#+begin_src emacs-lisp
(defun set-font (english chinese english-size chinese-size)
  "set chinese, english font and size"
  (set-face-attribute 'default nil :font
                      (format "%s:pixelsize=%d"  english english-size))
  (dolist (charset '(kana han symbol cjk-misc bopomofo))
    (set-fontset-font (frame-parameter nil 'font) charset
                      (font-spec :family chinese :size chinese-size))))

(add-to-list 'after-make-frame-functions
             (lambda (new-frame)
               (select-frame new-frame)
               (when (display-graphic-p)
               ;; (if window-system
                   (set-font "Source Code Pro" "Microsoft YaHei" 14 16))))
(when (display-graphic-p)
;; (if window-system
    (set-font "Source Code Pro" "Microsoft YaHei" 14 16))
#+end_src
** Theme settings
#+begin_src emacs-lisp
(use-package apropospriate-theme
  :ensure t
  :config
  ;; (load-theme 'apropospriate-light t)
  ;; (load-theme 'apropospriate-dark t)
  )

(use-package solarized-theme
  :ensure t
  :config
  ;; (load-theme 'apropospriate-light t)
  ;; (load-theme 'solarized-dark t)
  )

(use-package doom-themes
  :ensure t
  :custom-face
  (cursor ((t (:background "BlanchedAlmond"))))
  :config
  ;; flashing mode-line on errors
  (doom-themes-visual-bell-config)
  ;; Corrects (and improves) org-mode's native fontification.
  (doom-themes-org-config)
  ;; (load-theme 'doom-one t)
  ;; (load-theme 'doom-solarized-dark t)
  ;; (load-theme 'doom-solarized-light t)
  ;; (load-theme 'doom-dark+ t)
  ;; (load-theme 'doom-one t)
  ;; (load-theme 'doom-one-light t)
  ;; (load-theme 'doom-nord t)
  ;; (load-theme 'doom-nord-light t)
  ;; (load-theme 'doom-vibrant t)
  (load-theme 'doom-palenight t)
  ;; (load-theme 'doom-zenburn t)
  ;; (load-theme 'doom-spacegrey t)
  ;; (load-theme 'doom-gruvbox t)
  ;; (load-theme 'doom-dracula t)
  ;; (load-theme 'doom-molokai t)
  ;; (load-theme 'doom-monokai-pro t)
  ;; (load-theme 'doom-acario-light t)
  ;; (load-theme 'doom-opera-light t)
  ;; (load-theme 'doom-tomorrow-day t)
  (defun switch-theme ()
    "An interactive funtion to switch themes."
    (interactive)
    (disable-theme (intern (car (mapcar #'symbol-name custom-enabled-themes))))
    (call-interactively #'load-theme)))

;; automatically change theme based on time and location
;; (use-package theme-changer
;;   :ensure t
;;   :config
;;   ;; set latitude and longitude
;;   ;; (setq calendar-location-name "Dallas, TX")
;;   (setq calendar-latitude 30.82)
;;   (setq calendar-longitude 120.51)
;;   ;; set day and night themes
;;   (change-theme 'doom-one-light 'doom-palenight)
;;   )

;; following is another snippet from:
;; https://cyberchris.xyz/blog/2019/12/27/doom-emacs-custom-script
;; (setq hour
;;       (string-to-number
;;        (substring (current-time-string) 11 13))) ;; gets the hour
;; (if (member hour (number-sequence 6 16)) ;; if between 06:00-16:59
;;     (setq now 'doom-solarized-light) ;; then light theme
;;   (setq now 'doom-dracula)) ;; else dark theme from 5pm
;; (if (equal now doom-theme) ;; only switches to the correct theme if needed
;;     nil
;;   (setq doom-theme now))
#+end_src
** Optimize editing experience
Remove useless whitespace before saving.
#+begin_src emacs-lisp
;; Remove useless whitespace before saving a file
(defun delete-trailing-whitespace-except-current-line ()
  "An alternative to `delete-trailing-whitespace'.

The original function deletes trailing whitespace of the current line."
  (interactive)
  (let ((begin (line-beginning-position))
        (end (line-end-position)))
    (save-excursion
      (when (< (point-min) (1- begin))
        (save-restriction
          (narrow-to-region (point-min) (1- begin))
          (delete-trailing-whitespace)
          (widen)))
      (when (> (point-max) (+ end 2))
        (save-restriction
          (narrow-to-region (+ end 2) (point-max))
          (delete-trailing-whitespace)
          (widen))))))

(defun smart-delete-trailing-whitespace ()
  "Invoke `delete-trailing-whitespace-except-current-line' on selected major modes only."
  (unless (member major-mode '(diff-mode))
    (delete-trailing-whitespace-except-current-line)))

(add-hook 'before-save-hook #'smart-delete-trailing-whitespace)
#+end_src
** Notifications
#+begin_src emacs-lisp
(use-package notifications
  :ensure nil
  :when (eq system-type 'darwin)
  :commands notify-send
  :config
  (defun notify-send (&rest params)
    "Send notifications via `terminal-notifier'."
    (let ((title (plist-get params :title))
          (body (plist-get params :body)))
      (start-process "terminal-notifier"
                     nil
                     "terminal-notifier"
                     "-group" "Emacs"
                     "-title" title
                     "-message" body
                     "-activate" "org.gnu.Emacs"))))

(use-package notifications
  :ensure nil
  :unless (memq system-type '(gnu/linux darwin))
  :commands notify-send
  :config
  (defalias 'notify-send 'ignore))
#+end_src
** Keep .emacs.d directory clean
#+begin_src emacs-lisp
(use-package no-littering
  :ensure t
  :demand t
  :config
  ;; no-littering doesn't set this by default so we must place
  ;; auto save files in the same path as it uses for sessions
  (setq auto-save-file-name-transforms
        `((".*" ,(no-littering-expand-var-file-name "auto-save/") t)))
  )
#+end_src
* Backup settings
Auto backup and auto save.
#+begin_src emacs-lisp
(setq ;; backup settings. https://kangdalei.github.io/2017/Emacs-auto-save-file.html
 backup-by-copying t ; 自动备份
 backup-directory-alist
 '(("." . "~/.emacs.d/.saves")) ; 自动备份在目录"~/.emacs.d/.saves"下
 delete-old-versions t ; 自动删除旧的备份文件
 kept-new-versions 2 ; 保留最近的3个备份文件
 kept-old-versions 1 ; 保留最早的1个备份文件
 version-control t) ; 多次备份
;; auto save,  如果由于断电等原因emacs异常退出, 没来得及保存, 可以使用 M-x recover-file 来恢复文件.
;; (setq auto-save-default nil)
(setq-default auto-save-timeout 15) ; 15秒无动作,自动保存
(setq-default auto-save-interval 100) ; 100个字符间隔, 自动保存
#+end_src
* Encoding system settings
Use utf-8 everywhere.
#+begin_src emacs-lisp
;; from purcell:
(defun sanityinc/locale-var-encoding (v)
  "Return the encoding portion of the locale string V, or nil if missing."
  (when v
    (save-match-data
      (let ((case-fold-search t))
        (when (string-match "\\.\\([^.]*\\)\\'" v)
          (intern (downcase (match-string 1 v))))))))

(dolist (varname '("LC_ALL" "LANG" "LC_CTYPE"))
  (let ((encoding (sanityinc/locale-var-encoding (getenv varname))))
    (unless (memq encoding '(nil utf8 utf-8))
      (message "Warning: non-UTF8 encoding in environment variable %s may cause interop problems with this Emacs configuration." varname))))

(when (fboundp 'set-charset-priority)
  (set-charset-priority 'unicode))
(prefer-coding-system 'utf-8)
(setq locale-coding-system 'utf-8)
(unless (eq system-type 'windows-nt)
  (set-selection-coding-system 'utf-8))

;; Use UTF8 everywhere, see https://thraxys.wordpress.com/2016/01/13/utf-8-in-emacs-everywhere-forever/
;; (setq locale-coding-system 'utf-8)
;; (set-terminal-coding-system 'utf-8)
;; (set-keyboard-coding-system 'utf-8)
;; (set-selection-coding-system 'utf-8)
;; (set-default-coding-systems 'utf-8)
;; (set-language-environment 'utf-8)
;; (prefer-coding-system 'utf-8)
;; (when (display-graphic-p)
;;   (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING)))
#+end_src

If we encounter some coding system issues in a file, refer to following tips:
#+begin_quote
1. =M-x describe-coding-system= to see current coding system.
2. =M-x revert-buffer-with-coding-system= to set the correct coding system.
#+end_quote
* Revert settings
#+begin_src emacs-lisp
;; Update buffer whenever file changes
;; Also revert dired buffer.
(use-package autorevert
  :ensure nil
  :hook (after-init . global-auto-revert-mode)
  :custom
  (auto-revert-interval 3)
  (auto-revert-avoid-polling t)
  (auto-revert-verbose nil)
  (auto-revert-remote-files t)
  (auto-revert-check-vc-info t)
  (global-auto-revert-non-file-buffers t))
#+end_src
* Emacs server mode settings
Run server mode as possible.
#+begin_src emacs-lisp
(use-package server
  :ensure nil
  :when (display-graphic-p)
  :defer 1
  :config
  (unless (server-running-p)
    (server-start)))
#+end_src
* Window moving
#+begin_src emacs-lisp
(use-package ace-window
  :ensure t
  :init
  (progn
    (setq aw-keys '(?a ?s ?d ?f ?j ?k ?l ?o))
    (global-set-key (kbd "C-x o") 'ace-window)
    ;; make the jump key more bigger
    (custom-set-faces
     '(aw-leading-char-face
       ((t (:inherit ace-jump-face-foreground :height 3.0)))))
    )
  :diminish ace-window-mode
  )
#+end_src
* HTML Renderer settings
#+begin_src emacs-lisp
(use-package shr
  :ensure nil
  :custom
  (shr-use-fonts nil)
  (shr-use-colors nil)
  ;; (shr-cookie-policy nil)
  ;; (shr-cookie-policy t)
  ;; (setq shr-inhibit-images t) ; this will affect eww image showing
  ;; (shr-blocked-images nil)
  (shr-max-image-proportion 0.8)
  ;; (shr-image-animate nil)
  ;; (shr-blocked-images ".")
  )
#+end_src

* Tramp settings
#+begin_src emacs-lisp
;; transparent remote access
(use-package tramp
  :ensure nil
  :defer t
  :custom
  ;; Always use file cache when using tramp
  (remote-file-name-inhibit-cache nil)
  (tramp-default-method "ssh"))
#+end_src
* iBuffer settings
#+begin_src emacs-lisp
;; Use ibuffer instead
(fset 'list-buffers 'ibuffer)

;; Buffer manager
(use-package ibuffer
  :ensure nil
  :hook ((ibuffer-mode . ibuffer-auto-mode)
         (ibuffer-mode . (lambda ()
                           (ibuffer-switch-to-saved-filter-groups "Default"))))
  :custom
  (ibuffer-expert t)
  (ibuffer-movement-cycle nil)
  (ibuffer-show-empty-filter-groups nil)
  (ibuffer-saved-filter-groups
   '(("Default"
      ("Emacs" (or (name . "\\*scratch\\*")
                   (name . "\\*dashboard\\*")
                   (name . "\\*compilation\\*")
                   (name . "\\*Backtrace\\*")
                   (name . "\\*Packages\\*")
                   (name . "\\*Messages\\*")
                   (name . "\\*Customize\\*")))
      ("News" (or (name . "\\*newsticker\\*")))
      ("Help" (or (name . "\\*Help\\*")
                  (name . "\\*Apropos\\*")
                  (name . "\\*info\\*")
                  (mode . Man-mode)
                  (mode . woman-mode)))
      ("Repl" (or (mode . gnuplot-comint-mode)
                  (mode . inferior-emacs-lisp-mode)
                  (mode . inferior-python-mode)))
      ("Term" (or (mode . vterm-mode)
                  (mode . term-mode)
                  (mode . shell-mode)
                  (mode . eshell-mode)))
      ;; ("Mail" (or (mode . mail-mode)
      ;;             (mode . message-mode)
      ;;             (mode . gnus-group-mode)
      ;;             (mode . gnus-summary-mode)
      ;;             (mode . gnus-article-mode)
      ;;             (name . "\\*imap log\\*")
      ;;             (name . "\\.newsrc-dribble")))
      ("MU4E" (or (mode . mu4e-compose-mode)
                  (name . "\*mu4e\*")))
      ("Conf" (or (mode . yaml-mode)
                  (mode . conf-mode)))
      ("Dict" (or (mode . osx-dictionary-mode)
                  (mode . dictionary-mode)))
      ("Text" (and (derived-mode . text-mode)
                   (not (starred-name))))
      ("Magit" (or (mode . magit-repolist-mode)
                   (mode . magit-submodule-list-mode)
                   (mode . git-rebase-mode)
                   (derived-mode . magit-section-mode)))
      ("VC" (or (mode . diff-mode)
                (derived-mode . log-view-mode)))
      ("Prog" (and (derived-mode . prog-mode)
                   (not (starred-name))))
      ("Dired" (mode . dired-mode))
      ("EAF" (mode . eaf-mode))
      ("IRC" (or (mode . rcirc-mode)
                 (mode . erc-mode)))
      ("EBrowse" (or (mode . ebrowse-tree-mode)
                     (mode . ebrowse-member-mode)))
      ("Images" (or (mode . image-mode)
                    (mode . image-dired-display-image-mode)
                    (mode . image-dired-thumbnail-mode)))))))
#+end_src
* Recent files open
#+begin_src emacs-lisp
(use-package recentf
  :ensure nil
  :defines no-littering-etc-directory no-littering-var-directory quelpa-packages-dir
  :after no-littering
  :hook (after-init . recentf-mode)
  :custom
  (recentf-max-saved-items 300)
  (recentf-auto-cleanup 'never)
  ;; `recentf-add-file' will apply handlers first, then call `string-prefix-p'
  ;; to check if it can be pushed to recentf list.
  (recentf-filename-handlers '(abbreviate-file-name))
  (recentf-exclude `(,@(cl-loop for f in `(,package-user-dir
                                           ,quelpa-packages-dir
                                           ,no-littering-var-directory
                                           ,no-littering-etc-directory)
                                collect (abbreviate-file-name f))
                     ;; Folders on MacOS start
                     "^/private/tmp/"
                     "^/var/folders/"
                     ;; Folders on MacOS end
                     ".cache"
                     ".cask"
                     ".elfeed"
                     "bookmarks"
                     "cache"
                     "ido.*"
                     "persp-confs"
                     "recentf"
                     "undo-tree-hist"
                     "url"
                     "^/tmp/"
                     "/ssh\\(x\\)?:"
                     "/su\\(do\\)?:"
                     "^/usr/include/"
                     "/TAGS\\'"
                     "COMMIT_EDITMSG\\'")))
#+end_src
* Ivy settings
Use Ivy/counsel.
#+begin_src emacs-lisp
(use-package counsel
  :ensure t
  :diminish ivy-mode counsel-mode
  :bind (("C-s"   . swiper-isearch)
         ("C-r"   . swiper-isearch-backward)
         ("s-f"   . swiper)
         ("C-S-s" . swiper-all)

         ("C-c C-r" . ivy-resume)
         ("C-c v p" . ivy-push-view)
         ("C-c v o" . ivy-pop-view)
         ("C-c v ." . ivy-switch-view)

         :map counsel-mode-map
         ([remap swiper] . counsel-grep-or-swiper)
         ([remap swiper-backward] . counsel-grep-or-swiper-backward)
         ([remap dired] . counsel-dired)
         ([remap set-variable] . counsel-set-variable)
         ([remap insert-char] . counsel-unicode-char)
         ([remap recentf-open-files] . counsel-recentf)

         ("C-x j"   . counsel-mark-ring)
         ("C-h F"   . counsel-faces)

         ("C-c B" . counsel-bookmarked-directory)
         ("C-c L" . counsel-load-library)
         ("C-c O" . counsel-find-file-extern)
         ("C-c P" . counsel-package)
         ("C-c R" . counsel-list-processes)
         ("C-c f" . counsel-find-library)
         ("C-c g" . counsel-grep)
         ("C-c h" . counsel-command-history)
         ("C-c i" . counsel-git)
         ("C-c j" . counsel-git-grep)
         ("C-c o" . counsel-outline)
         ("C-c r" . counsel-rg)
         ("C-c z" . counsel-fzf)

         ("C-c c B" . counsel-bookmarked-directory)
         ("C-c c F" . counsel-faces)
         ("C-c c L" . counsel-load-library)
         ("C-c c O" . counsel-find-file-extern)
         ("C-c c P" . counsel-package)
         ("C-c c R" . counsel-list-processes)
         ("C-c c a" . counsel-apropos)
         ("C-c c e" . counsel-colors-emacs)
         ("C-c c f" . counsel-find-library)
         ("C-c c g" . counsel-grep)
         ("C-c c h" . counsel-command-history)
         ("C-c c i" . counsel-git)
         ("C-c c j" . counsel-git-grep)
         ("C-c c l" . counsel-locate)
         ("C-c c m" . counsel-minibuffer-history)
         ("C-c c o" . counsel-outline)
         ("C-c c p" . counsel-pt)
         ("C-c c r" . counsel-rg)
         ("C-c c s" . counsel-ag)
         ("C-c c t" . counsel-load-theme)
         ("C-c c u" . counsel-unicode-char)
         ("C-c c w" . counsel-colors-web)
         ("C-c c v" . counsel-set-variable)
         ("C-c c z" . counsel-fzf)

         :map ivy-minibuffer-map
         ("C-w" . ivy-yank-word)
         ("C-`" . ivy-avy)

         :map counsel-find-file-map
         ("C-h" . counsel-up-directory)

         :map swiper-map
         ("M-s" . swiper-isearch-toggle)
         ("M-%" . swiper-query-replace)

         :map isearch-mode-map
         ("M-s" . swiper-isearch-toggle))
  :hook ((after-init . ivy-mode)
         (ivy-mode . counsel-mode))
  :init
  (setq enable-recursive-minibuffers t) ; Allow commands in minibuffers

  (setq ivy-use-selectable-prompt t     ; if you want to create a new file, C-p
        ivy-use-virtual-buffers t    ; Enable bookmarks and recentf
        ivy-height 10
        ivy-fixed-height-minibuffer t
        ivy-count-format "(%d/%d) "
        ivy-on-del-error-function nil
        ivy-initial-inputs-alist nil)

  (setq swiper-action-recenter t)

  (setq counsel-find-file-at-point t
        counsel-yank-pop-separator "\n────────\n")

  ;; Use the faster search tool: ripgrep (`rg')
  (when (executable-find "rg")
    (setq counsel-grep-base-command "rg -S --no-heading --line-number --color never %s %s")
    (when (and sys/macp (executable-find "gls"))
      (setq counsel-find-file-occur-use-find nil
            counsel-find-file-occur-cmd
            "gls -a | grep -i -E '%s' | tr '\\n' '\\0' | xargs -0 gls -d --group-directories-first")))
  :config
  (with-no-warnings
    ;; Display an arrow with the selected item
    (defun my-ivy-format-function-arrow (cands)
      "Transform CANDS into a string for minibuffer."
      (ivy--format-function-generic
       (lambda (str)
         (concat (if (and (bound-and-true-p all-the-icons-ivy-rich-mode)
                          (>= (length str) 1)
                          (string= " " (substring str 0 1)))
                     ">"
                   "> ")
                 (ivy--add-face str 'ivy-current-match)))
       (lambda (str)
         (concat (if (and (bound-and-true-p all-the-icons-ivy-rich-mode)
                          (>= (length str) 1)
                          (string= " " (substring str 0 1)))
                     " "
                   "  ")
                 str))
       cands
       "\n"))
    (setf (alist-get 't ivy-format-functions-alist) #'my-ivy-format-function-arrow)

    ;; Pre-fill search keywords
    ;; @see https://www.reddit.com/r/emacs/comments/b7g1px/withemacs_execute_commands_like_marty_mcfly/
    (defvar my-ivy-fly-commands
      '(query-replace-regexp
        flush-lines keep-lines ivy-read
        swiper swiper-backward swiper-all
        swiper-isearch swiper-isearch-backward
        lsp-ivy-workspace-symbol lsp-ivy-global-workspace-symbol
        counsel-grep-or-swiper counsel-grep-or-swiper-backward
        counsel-grep counsel-ack counsel-ag counsel-rg counsel-pt))
    (defvar-local my-ivy-fly--travel nil)

    (defun my-ivy-fly-back-to-present ()
      (cond ((and (memq last-command my-ivy-fly-commands)
                  (equal (this-command-keys-vector) (kbd "M-p")))
             ;; repeat one time to get straight to the first history item
             (setq unread-command-events
                   (append unread-command-events
                           (listify-key-sequence (kbd "M-p")))))
            ((or (memq this-command '(self-insert-command
                                      ivy-forward-char
                                      ivy-delete-char delete-forward-char
                                      end-of-line mwim-end-of-line
                                      mwim-end-of-code-or-line mwim-end-of-line-or-code
                                      yank ivy-yank-word counsel-yank-pop))
                 (equal (this-command-keys-vector) (kbd "M-n")))
             (unless my-ivy-fly--travel
               (delete-region (point) (point-max))
               (when (memq this-command '(ivy-forward-char
                                          ivy-delete-char delete-forward-char
                                          end-of-line mwim-end-of-line
                                          mwim-end-of-code-or-line
                                          mwim-end-of-line-or-code))
                 (insert (ivy-cleanup-string ivy-text))
                 (when (memq this-command '(ivy-delete-char delete-forward-char))
                   (beginning-of-line)))
               (setq my-ivy-fly--travel t)))))

    (defun my-ivy-fly-time-travel ()
      (when (memq this-command my-ivy-fly-commands)
        (let* ((kbd (kbd "M-n"))
               (cmd (key-binding kbd))
               (future (and cmd
                            (with-temp-buffer
                              (when (ignore-errors
                                      (call-interactively cmd) t)
                                (buffer-string))))))
          (when future
            (save-excursion
              (insert (propertize (replace-regexp-in-string
                                   "\\\\_<" ""
                                   (replace-regexp-in-string
                                    "\\\\_>" ""
                                    future))
                                  'face 'shadow)))
            (add-hook 'pre-command-hook 'my-ivy-fly-back-to-present nil t)))))

    (add-hook 'minibuffer-setup-hook #'my-ivy-fly-time-travel)
    (add-hook 'minibuffer-exit-hook
              (lambda ()
                (remove-hook 'pre-command-hook 'my-ivy-fly-back-to-present t)))

    ;;
    ;; Improve search experience of `swiper' and `counsel'
    ;;
    (defun my-ivy-switch-to-swiper (&rest _)
      "Switch to `swiper' with the current input."
      (swiper ivy-text))

    (defun my-ivy-switch-to-swiper-isearch (&rest _)
      "Switch to `swiper-isearch' with the current input."
      (swiper-isearch ivy-text))

    (defun my-ivy-switch-to-swiper-all (&rest _)
      "Switch to `swiper-all' with the current input."
      (swiper-all ivy-text))

    (defun my-ivy-switch-to-rg-dwim (&rest _)
      "Switch to `rg-dwim' with the current input."
      (rg-dwim default-directory))

    (defun my-ivy-switch-to-counsel-rg (&rest _)
      "Switch to `counsel-rg' with the current input."
      (counsel-rg ivy-text default-directory))

    (defun my-ivy-switch-to-counsel-git-grep (&rest _)
      "Switch to `counsel-git-grep' with the current input."
      (counsel-git-grep ivy-text default-directory))

    (defun my-ivy-switch-to-counsel-find-file (&rest _)
      "Switch to `counsel-find-file' with the current input."
      (counsel-find-file ivy-text))

    (defun my-ivy-switch-to-counsel-fzf (&rest _)
      "Switch to `counsel-fzf' with the current input."
      (counsel-fzf ivy-text default-directory))

    (defun my-ivy-switch-to-counsel-git (&rest _)
      "Switch to `counsel-git' with the current input."
      (counsel-git ivy-text))

    ;; @see https://emacs-china.org/t/swiper-swiper-isearch/9007/12
    (defun my-swiper-toggle-counsel-rg ()
      "Toggle `counsel-rg' and `swiper'/`swiper-isearch' with the current input."
      (interactive)
      (ivy-quit-and-run
        (if (memq (ivy-state-caller ivy-last) '(swiper swiper-isearch))
            (my-ivy-switch-to-counsel-rg)
          (my-ivy-switch-to-swiper-isearch))))
    (bind-key "<C-return>" #'my-swiper-toggle-counsel-rg swiper-map)
    (bind-key "<C-return>" #'my-swiper-toggle-counsel-rg counsel-ag-map)

    (with-eval-after-load 'rg
      (defun my-swiper-toggle-rg-dwim ()
        "Toggle `rg-dwim' with the current input."
        (interactive)
        (ivy-quit-and-run
          (rg-dwim default-directory)))
      (bind-key "<M-return>" #'my-swiper-toggle-rg-dwim swiper-map)
      (bind-key "<M-return>" #'my-swiper-toggle-rg-dwim counsel-ag-map))

    (defun my-swiper-toggle-swiper-isearch ()
      "Toggle `swiper' and `swiper-isearch' with the current input."
      (interactive)
      (ivy-quit-and-run
        (if (eq (ivy-state-caller ivy-last) 'swiper-isearch)
            (swiper ivy-text)
          (swiper-isearch ivy-text))))
    (bind-key "<s-return>" #'my-swiper-toggle-swiper-isearch swiper-map)

    (defun my-counsel-find-file-toggle-fzf ()
      "Toggle `counsel-fzf' with the current `counsel-find-file' input."
      (interactive)
      (ivy-quit-and-run
        (counsel-fzf (or ivy-text "") default-directory)))
    (bind-key "<C-return>" #'my-counsel-find-file-toggle-fzf counsel-find-file-map)

    (defun my-swiper-toggle-rg-dwim ()
      "Toggle `rg-dwim' with the current input."
      (interactive)
      (ivy-quit-and-run (my-ivy-switch-to-rg-dwim)))
    (bind-key "<M-return>" #'my-swiper-toggle-rg-dwim swiper-map)
    (bind-key "<M-return>" #'my-swiper-toggle-rg-dwim counsel-ag-map)

    (defun my-swiper-toggle-swiper-isearch ()
      "Toggle `swiper' and `swiper-isearch' with the current input."
      (interactive)
      (ivy-quit-and-run
        (if (eq (ivy-state-caller ivy-last) 'swiper-isearch)
            (my-ivy-switch-to-swiper)
          (my-ivy-switch-to-swiper-isearch))))
    (bind-key "<s-return>" #'my-swiper-toggle-swiper-isearch swiper-map)

    ;; More actions
    (ivy-add-actions
     #'swiper-isearch
     '(("r" my-ivy-switch-to-counsel-rg "rg")
       ("d" my-ivy-switch-to-rg-dwim "rg dwim")
       ("s" my-ivy-switch-to-swiper "swiper")
       ("a" my-ivy-switch-to-swiper-all "swiper all")))

    (ivy-add-actions
     #'swiper
     '(("r" my-ivy-switch-to-counsel-rg "rg")
       ("d" my-ivy-switch-to-rg-dwim "rg dwim")
       ("s" my-ivy-switch-to-swiper-isearch "swiper isearch")
       ("a" my-ivy-switch-to-swiper-all "swiper all")))

    (ivy-add-actions
     #'swiper-all
     '(("g" my-ivy-switch-to-counsel-git-grep "git grep")
       ("r" my-ivy-switch-to-counsel-rg "rg")
       ("d" my-ivy-switch-to-rg-dwim "rg dwim")
       ("s" my-swiper-toggle-swiper-isearch "swiper isearch")
       ("S" my-ivy-switch-to-swiper "swiper")))

    (ivy-add-actions
     #'counsel-rg
     '(("s" my-ivy-switch-to-swiper-isearch "swiper isearch")
       ("S" my-ivy-switch-to-swiper "swiper")
       ("a" my-ivy-switch-to-swiper-all "swiper all")
       ("d" my-ivy-switch-to-rg-dwim "rg dwim")))

    (ivy-add-actions
     #'counsel-git-grep
     '(("s" my-ivy-switch-to-swiper-isearch "swiper isearch")
       ("S" my-ivy-switch-to-swiper "swiper")
       ("r" my-ivy-switch-to-rg-dwim "rg")
       ("d" my-ivy-switch-to-rg-dwim "rg dwim")
       ("a" my-ivy-switch-to-swiper-all "swiper all")))

    (ivy-add-actions
     #'counsel-find-file
     '(("g" my-ivy-switch-to-counsel-git "git")
       ("z" my-ivy-switch-to-counsel-fzf "fzf")))

    (ivy-add-actions
     #'counsel-git
     '(("f" my-ivy-switch-to-counsel-find-file "find file")
       ("z" my-ivy-switch-to-counsel-fzf "fzf")))

    (ivy-add-actions
     'counsel-fzf
     '(("f" my-ivy-switch-to-counsel-find-file "find file")
       ("g" my-ivy-switch-to-counsel-git "git")))

    ;; Integration with `projectile'
    (with-eval-after-load 'projectile
      (setq projectile-completion-system 'ivy))

    ;; Integration with `magit'
    (with-eval-after-load 'magit
      (setq magit-completing-read-function 'ivy-completing-read)))

  ;; Enhance M-x
  (use-package amx
    :ensure t
    :init (setq amx-history-length 20))

  ;; Better sorting and filtering
  (use-package prescient
    :ensure t
    :defer 7
    :after counsel
    :commands prescient-persist-mode
    :init (prescient-persist-mode 1))

  (use-package ivy-prescient
    :ensure t
    :after counsel
    :commands ivy-prescient-re-builder
    :custom-face
    (ivy-minibuffer-match-face-1 ((t (:inherit font-lock-doc-face :foreground nil))))
    :init
    (defun ivy-prescient-non-fuzzy (str)
      "Generate an Ivy-formatted non-fuzzy regexp list for the given STR.
This is for use in `ivy-re-builders-alist'."
      (let ((prescient-filter-method '(literal regexp)))
        (ivy-prescient-re-builder str)))

    (setq ivy-prescient-retain-classic-highlighting t
          ivy-re-builders-alist
          '((counsel-ag . ivy-prescient-non-fuzzy)
            (counsel-rg . ivy-prescient-non-fuzzy)
            (counsel-pt . ivy-prescient-non-fuzzy)
            (counsel-grep . ivy-prescient-non-fuzzy)
            (counsel-imenu . ivy-prescient-non-fuzzy)
            (counsel-yank-pop . ivy-prescient-non-fuzzy)
            (swiper . ivy-prescient-non-fuzzy)
            (swiper-isearch . ivy-prescient-non-fuzzy)
            (swiper-all . ivy-prescient-non-fuzzy)
            (lsp-ivy-workspace-symbol . ivy-prescient-non-fuzzy)
            (lsp-ivy-global-workspace-symbol . ivy-prescient-non-fuzzy)
            (insert-char . ivy-prescient-non-fuzzy)
            (counsel-unicode-char . ivy-prescient-non-fuzzy)
            (t . ivy-prescient-re-builder))
          ivy-prescient-sort-commands
          '(:not swiper swiper-isearch ivy-switch-buffer
            lsp-ivy-workspace-symbol ivy-resume ivy--restore-session
            counsel-grep counsel-git-grep counsel-rg counsel-ag
            counsel-ack counsel-fzf counsel-pt counsel-imenu
            counsel-org-capture counsel-load-theme counsel-yank-pop
            counsel-recentf counsel-buffer-or-recentf))

    (ivy-prescient-mode 1))

  ;; Ivy integration for Projectile
  (use-package counsel-projectile
    :ensure t
    :hook (counsel-mode . counsel-projectile-mode)
    :init (setq counsel-projectile-grep-initial-input '(ivy-thing-at-point)))

  ;; Integrate yasnippet
  (use-package ivy-yasnippet
    :ensure t
    :bind ("C-c C-y" . ivy-yasnippet))

  ;; Select from xref candidates with Ivy
  (use-package ivy-xref
    :ensure t
    :init
    (when (boundp 'xref-show-definitions-function)
      (setq xref-show-definitions-function #'ivy-xref-show-defs))
    (setq xref-show-xrefs-function #'ivy-xref-show-xrefs))

  ;; Display world clock using Ivy
  (use-package counsel-world-clock
    :ensure t
    :bind (:map counsel-mode-map
           ("C-c c k" . counsel-world-clock)))

  ;; Tramp ivy interface
  (use-package counsel-tramp
    :ensure t
    :bind (:map counsel-mode-map
           ("C-c c T" . counsel-tramp)))
)
#+end_src

Other related settings makes ivy more beautiful.
#+begin_src emacs-lisp
;; Better experience with icons
;; Enable it before`ivy-rich-mode' for better performance
(use-package all-the-icons-ivy-rich
  :ensure t
  ;; :if (icons-displayable-p)
  :hook (ivy-mode . all-the-icons-ivy-rich-mode))

;; More friendly display transformer for Ivy
(use-package ivy-rich
  :ensure t
  :hook (;; Must load after `counsel-projectile'
         (counsel-projectile-mode . ivy-rich-mode)
         (ivy-rich-mode . (lambda ()
                            "Use abbreviate in `ivy-rich-mode'."
                            (setq ivy-virtual-abbreviate
                                  (or (and ivy-rich-mode 'abbreviate) 'name)))))
  :init
  ;; For better performance
  (setq ivy-rich-parse-remote-buffer nil))
#+end_src
* Dired settings
** Dired keybindings
| key                        | description                                                   |
|----------------------------+---------------------------------------------------------------|
| n                          | next line                                                     |
| p                          | previous line                                                 |
| j                          | jump to file in buffer                                        |
| RET                        | select file or directory                                      |
| =^=                          | go to parent directory                                        |
| S-RET                      | open file in other window                                     |
| M-RET                      | show file in other window without focusing (previewing files) |
| g                          | refresh buffer                                                |
|----------------------------+---------------------------------------------------------------|
| m                          | mark a file                                                   |
| u                          | unmark a file                                                 |
| U                          | unmark all the files                                          |
| * t                        | Inverts marked files in buffer                                |
| % m                        | Mark files in buffer using regular expression                 |
| =*=                          | lots of other auto-marking functions                          |
| k                          | “Kill” marked items (refresh buffer with g to get them back)  |
|----------------------------+---------------------------------------------------------------|
| C                          | copy marked files (or if not marked, current file)            |
| R                          | Rename marked files, renaming multiple is a move!             |
| % R                        | Rename based on regular expression                            |
|----------------------------+---------------------------------------------------------------|
| D                          | Delete marked file                                            |
| d                          | Mark file for deletion                                        |
| x                          | Execute deletion for marks                                    |
| =delete-by-moving-to-trash=  | Move to trash instead of deleting permanently                 |
|----------------------------+---------------------------------------------------------------|
| Z                          | Compress or uncompress a file or folder to (.tar.gz)          |
| c                          | Compress selection to a specific file                         |
| =dired-compress-files-alist= | Bind compression commands to file extension                   |
|----------------------------+---------------------------------------------------------------|
| T                          | Touch (change timestamp)                                      |
| M                          | Change file mode                                              |
| O                          | Change file owner                                             |
| G                          | Change file group                                             |
| S                          | Create a symbolic link to this file                           |
| L                          | Load an Emacs Lisp file into Emacs                            |
|                            |                                                               |

** Basic settings
#+begin_src emacs-lisp
(defun xah-open-in-external-app (&optional @fname)
  "Open the current file or dired marked files in external app.
The app is chosen from your OS's preference.

When called in emacs lisp, if @fname is given, open that.

URL `http://ergoemacs.org/emacs/emacs_dired_open_file_in_ext_apps.html'
Version 2019-11-04"
  (interactive)
  (let* (
         ($file-list
          (if @fname
              (progn (list @fname))
            (if (string-equal major-mode "dired-mode")
                (dired-get-marked-files)
              (list (buffer-file-name)))))
         ($do-it-p (if (<= (length $file-list) 5)
                       t
                     (y-or-n-p "Open more than 5 files? "))))
    (when $do-it-p
      (cond
       ((string-equal system-type "windows-nt")
        (mapc
         (lambda ($fpath)
           (w32-shell-execute "open" $fpath)) $file-list))
       ((string-equal system-type "darwin")
        (mapc
         (lambda ($fpath)
           (shell-command
            (concat "open " (shell-quote-argument $fpath))))  $file-list))
       ((string-equal system-type "gnu/linux")
        (mapc
         (lambda ($fpath) (let ((process-connection-type nil))
                       (start-process "" nil "xdg-open" $fpath))) $file-list))))))

(use-package dired
  :ensure nil
  :bind (:map dired-mode-map
         ;; consistent with ivy
         ("C-c C-e"   . wdired-change-to-wdired-mode)
         ("C-<return>" . xah-open-in-external-app)
         )
  :custom
  (dired-dwim-target t)
  (dired-bind-vm nil)
  (dired-bind-man nil)
  (dired-bind-info nil)
  (dired-auto-revert-buffer t)
  (dired-hide-details-hide-symlink-targets nil)
  (dired-listing-switches "-AFhlv"))

(use-package dired-aux
  :ensure nil
  :after dired
  :bind (:map dired-mode-map
         ("C-c +" . dired-create-empty-file))
  :config
  ;; with the help of `evil-collection', P is bound to `dired-do-print'.
  (define-advice dired-do-print (:override (&optional _))
    "Show/hide dotfiles."
    (interactive)
    (if (or (not (boundp 'dired-dotfiles-show-p)) dired-dotfiles-show-p)
        (progn
          (setq-local dired-dotfiles-show-p nil)
          (dired-mark-files-regexp "^\\.")
          (dired-do-kill-lines))
      (revert-buffer)
      (setq-local dired-dotfiles-show-p t)))
  :custom
  (dired-isearch-filenames 'dwim)
  (dired-create-destination-dirs 'ask)
  (dired-vc-rename-file t))

(use-package dired-x
  :ensure nil
  :hook (dired-mode . dired-omit-mode)
  :custom
  (dired-omit-verbose nil)
  (dired-omit-files (rx string-start
                        (or ".DS_Store"
                            ".cache"
                            ".vscode"
                            ".ccls-cache" ".clangd")
                        string-end))
  ;; Dont prompt about killing buffer visiting delete file
  (dired-clean-confirm-killing-deleted-buffers nil)
  (dired-guess-shell-alist-user `((,(rx "."
                                        (or
                                         ;; Videos
                                         "mp4" "avi" "mkv" "flv" "ogv" "ogg" "mov"
                                         ;; Music
                                         "wav" "mp3" "flac"
                                         ;; Images
                                         "jpg" "jpeg" "png" "gif" "xpm" "svg" "bmp"
                                         ;; Docs
                                         "pdf" "md" "djvu" "ps" "eps" "doc" "docx" "xls" "xlsx" "ppt" "pptx")
                                        string-end)
                                   ,(cond ((eq system-type 'gnu/linux) "xdg-open")
                                          ((eq system-type 'darwin) "open")
                                          ((eq system-type 'windows-nt) "start")
                                          (t "")))))
  )
#+end_src
** Make dired mode colorful
#+begin_src emacs-lisp
(use-package diredfl
  :ensure t
  :hook (dired-mode . diredfl-mode))
#+end_src
** Show subtree in Dired
#+begin_src emacs-lisp
(use-package dired-subtree
  :ensure t
  :after dired
  :custom
  (dired-subtree-use-backgrounds nil))
#+end_src
* all-the-icons settings
#+begin_src emacs-lisp
(use-package all-the-icons
  :ensure t
  :when (display-graphic-p)
  :demand t
  :config
  (add-to-list 'all-the-icons-icon-alist
               '("^Rakefile$" all-the-icons-alltheicon "ruby-alt" :face all-the-icons-red))
  (add-to-list 'all-the-icons-icon-alist
               '("\\.go$" all-the-icons-fileicon "go" :face all-the-icons-blue))
  (add-to-list 'all-the-icons-icon-alist
               '("\\go.mod$" all-the-icons-fileicon "go" :face all-the-icons-dblue))
  (add-to-list 'all-the-icons-icon-alist
               '("\\go.sum$" all-the-icons-fileicon "go" :face all-the-icons-dpurple))
  (add-to-list 'all-the-icons-mode-icon-alist
               '(go-mode all-the-icons-fileicon "go" :face all-the-icons-blue))
  (add-to-list 'all-the-icons-mode-icon-alist
               '(xwidget-webkit-mode all-the-icons-faicon "chrome" :v-adjust -0.1 :face all-the-icons-blue))
  (add-to-list 'all-the-icons-mode-icon-alist
               '(bongo-playlist-mode all-the-icons-material "queue_music" :height 1.2 :face 'all-the-icons-green))
  (add-to-list 'all-the-icons-mode-icon-alist
               '(bongo-library-mode all-the-icons-material "library_music" :height 1.1 :face 'all-the-icons-green))
  (add-to-list 'all-the-icons-mode-icon-alist
               '(gnus-group-mode all-the-icons-fileicon "gnu" :face 'all-the-icons-silver))
  (add-to-list 'all-the-icons-mode-icon-alist
               '(gnus-summary-mode all-the-icons-octicon "inbox" :height 1.0 :v-adjust 0.0 :face 'all-the-icons-orange))
  (add-to-list 'all-the-icons-mode-icon-alist
               '(gnus-article-mode all-the-icons-octicon "mail" :height 1.1 :v-adjust 0.0 :face 'all-the-icons-lblue))
  (add-to-list 'all-the-icons-mode-icon-alist
               '(message-mode all-the-icons-octicon "mail" :height 1.1 :v-adjust 0.0 :face 'all-the-icons-lblue))
  (add-to-list 'all-the-icons-mode-icon-alist
               '(diff-mode all-the-icons-octicon "git-compare" :v-adjust 0.0 :face all-the-icons-lred))
  (add-to-list 'all-the-icons-mode-icon-alist
               '(flycheck-error-list-mode all-the-icons-octicon "checklist" :height 1.1 :v-adjust 0.0 :face all-the-icons-lred))
  (add-to-list 'all-the-icons-icon-alist
               '("\\.rss$" all-the-icons-octicon "rss" :height 1.1 :v-adjust 0.0 :face all-the-icons-lorange))
  (add-to-list 'all-the-icons-mode-icon-alist
               '(elfeed-search-mode all-the-icons-faicon "rss-square" :v-adjust -0.1 :face all-the-icons-orange))
  (add-to-list 'all-the-icons-mode-icon-alist
               '(elfeed-show-mode all-the-icons-octicon "rss" :height 1.1 :v-adjust 0.0 :face all-the-icons-lorange))
  (add-to-list 'all-the-icons-mode-icon-alist
               '(newsticker-mode all-the-icons-faicon "rss-square" :v-adjust -0.1 :face all-the-icons-orange))
  (add-to-list 'all-the-icons-mode-icon-alist
               '(newsticker-treeview-mode all-the-icons-faicon "rss-square" :v-adjust -0.1 :face all-the-icons-orange))
  (add-to-list 'all-the-icons-mode-icon-alist
               '(newsticker-treeview-list-mode all-the-icons-octicon "rss" :height 1.1 :v-adjust 0.0 :face all-the-icons-orange))
  (add-to-list 'all-the-icons-mode-icon-alist
               '(newsticker-treeview-item-mode all-the-icons-octicon "rss" :height 1.1 :v-adjust 0.0 :face all-the-icons-lorange))
  (add-to-list 'all-the-icons-icon-alist
               '("\\.[bB][iI][nN]$" all-the-icons-octicon "file-binary" :v-adjust 0.0 :face all-the-icons-yellow))
  (add-to-list 'all-the-icons-icon-alist
               '("\\.c?make$" all-the-icons-fileicon "gnu" :face all-the-icons-dorange))
  (add-to-list 'all-the-icons-icon-alist
               '("\\.conf$" all-the-icons-octicon "settings" :v-adjust 0.0 :face all-the-icons-yellow))
  (add-to-list 'all-the-icons-icon-alist
               '("\\.toml$" all-the-icons-octicon "settings" :v-adjust 0.0 :face all-the-icons-yellow))
  (add-to-list 'all-the-icons-mode-icon-alist
               '(conf-mode all-the-icons-octicon "settings" :v-adjust 0.0 :face all-the-icons-yellow))
  (add-to-list 'all-the-icons-mode-icon-alist
               '(conf-space-mode all-the-icons-octicon "settings" :v-adjust 0.0 :face all-the-icons-yellow))
  (add-to-list 'all-the-icons-mode-icon-alist
               '(forge-topic-mode all-the-icons-alltheicon "git" :face all-the-icons-blue))
  (add-to-list 'all-the-icons-icon-alist
               '("\\.xpm$" all-the-icons-octicon "file-media" :v-adjust 0.0 :face all-the-icons-dgreen))
  (add-to-list 'all-the-icons-mode-icon-alist
               '(help-mode all-the-icons-faicon "info-circle" :height 1.1 :v-adjust -0.1 :face all-the-icons-purple))
  (add-to-list 'all-the-icons-mode-icon-alist
               '(helpful-mode all-the-icons-faicon "info-circle" :height 1.1 :v-adjust -0.1 :face all-the-icons-purple))
  (add-to-list 'all-the-icons-mode-icon-alist
               '(Info-mode all-the-icons-faicon "info-circle" :height 1.1 :v-adjust -0.1))
  (add-to-list 'all-the-icons-icon-alist
               '("NEWS$" all-the-icons-faicon "newspaper-o" :height 0.9 :v-adjust -0.2))
  (add-to-list 'all-the-icons-icon-alist
               '("Cask\\'" all-the-icons-fileicon "elisp" :height 1.0 :v-adjust -0.2 :face all-the-icons-blue))
  (add-to-list 'all-the-icons-mode-icon-alist
               '(cask-mode all-the-icons-fileicon "elisp" :height 1.0 :v-adjust -0.2 :face all-the-icons-blue))
  (add-to-list 'all-the-icons-icon-alist
               '(".*\\.ipynb\\'" all-the-icons-fileicon "jupyter" :height 1.2 :face all-the-icons-orange))
  (add-to-list 'all-the-icons-mode-icon-alist
               '(ein:notebooklist-mode all-the-icons-faicon "book" :face all-the-icons-lorange))
  (add-to-list 'all-the-icons-mode-icon-alist
               '(ein:notebook-mode all-the-icons-fileicon "jupyter" :height 1.2 :face all-the-icons-orange))
  (add-to-list 'all-the-icons-mode-icon-alist
               '(ein:notebook-multilang-mode all-the-icons-fileicon "jupyter" :height 1.2 :face all-the-icons-dorange))
  (add-to-list 'all-the-icons-icon-alist
               '("\\.epub\\'" all-the-icons-faicon "book" :height 1.0 :v-adjust -0.1 :face all-the-icons-green))
  (add-to-list 'all-the-icons-mode-icon-alist
               '(nov-mode all-the-icons-faicon "book" :height 1.0 :v-adjust -0.1 :face all-the-icons-green))
  (add-to-list 'all-the-icons-mode-icon-alist
               '(gfm-mode all-the-icons-octicon "markdown" :face all-the-icons-lblue))
  )
#+end_src
* Mode-line settings
#+begin_src emacs-lisp
;; You must run (all-the-icons-install-fonts) one time after
;; installing this package!
(use-package minions
  :ensure t
  :hook (doom-modeline-mode . minions-mode))

(use-package doom-modeline
  :ensure t
  :after eshell     ;; Make sure it gets hooked after eshell
  :hook (after-init . doom-modeline-init)
  :custom-face
  (mode-line ((t (:height 0.85))))
  (mode-line-inactive ((t (:height 0.85))))
  :custom
  (inhibit-compacting-font-caches t)
  (doom-modeline-height 15)
  (doom-modeline-bar-width 6)
  ;; (doom-modeline-lsp t)
  (doom-modeline-github nil)
  (doom-modeline-mu4e nil)
  (doom-modeline-irc nil)
  (doom-modeline-minor-modes t)
  (doom-modeline-persp-name nil)
  (doom-modeline-buffer-file-name-style 'truncate-except-project)
  (doom-modeline-major-mode-color-icon t))
#+end_src
* Org mode settings
** Set the org block background to darker 5%.
#+begin_src emacs-lisp
(require 'color)
(defun set-block-bg()
  (set-face-attribute 'org-block nil :background
                      (color-darken-name
                       (face-attribute 'default :background) 5)))
#+end_src
** Org basic settings
#+begin_src emacs-lisp
(use-package org
  :ensure org-plus-contrib
  :defer 7
  :mode ("\\.org\\'" . org-mode)
  :hook ((org-mode . visual-line-mode)
         (org-mode . set-block-bg)
         ;; (org-mode . add-pcomplete-to-capf)
         )
  :commands (org-find-exact-headline-in-buffer org-set-tags)
  ;; change <return> will affect flyspell-popup
  ;; :bind (:map org-mode-map
  ;;             ("<return>" . (org-return-indent)))

  :config
  (define-advice org-fast-tag-selection (:around (func &rest args))
    "Hide the modeline in *Org tags* buffer so you can actually see its
  content."
    (cl-letf* (((symbol-function 'org-fit-window-to-buffer)
                (lambda (&optional window _max-height _min-height _shrink-only)
                  (when-let (buf (window-buffer window))
                    (with-current-buffer buf
                      (setq mode-line-format nil))))))
      (apply func args)))
  :custom-face
  (org-document-title ((t (:height 1.75 :weight bold))))
  (org-level-1 ((t (:height 1.3 :foreground "#51afef" :weight bold))))
  (org-level-2 ((t (:height 1.3 :foreground "#C57BDB" :weight bold))))
  (org-level-3 ((t (:height 1.3 :foreground "#a991f1" :weight bold))))
  (org-level-4 ((t (:height 1.3 :foreground "#7cc3f3" :weight bold))))
  (org-level-5 ((t (:height 1.3 :foreground "#d39ce3" :weight bold))))
  (org-level-6 ((t (:height 1.3 :foreground "#a8d7f7" :weight bold))))
  (org-level-7 ((t (:height 1.3 :foreground "#e2bded" :weight bold))))
  (org-level-8 ((t (:height 1.3 :foreground "#dceffb" :weight bold))))
  (org-level-9 ((t (:height 1.3 :weight bold))))
  :custom
  (org-directory "~/org")
  (org-default-notes-file (expand-file-name "all-posts.org" org-directory))
  (org-modules '(ol-bibtex ol-gnus ol-info ol-eww org-habit org-protocol))
  ;; prettify
  (org-ellipsis " ▾")
  (org-loop-over-headlines-in-active-region t)
  (org-fontify-todo-headline t)
  (org-fontify-done-headline t)
  (org-fontify-quote-and-verse-blocks t)
  (org-fontify-whole-heading-line t)
  (org-hide-macro-markers t)
  (org-hide-emphasis-markers t)
  (org-highlight-latex-and-related '(native script entities))
  (org-pretty-entities t)
  (org-hide-leading-stars nil)
  (org-indent-mode-turns-on-hiding-stars nil)
  (org-startup-indented t)
  (org-startup-with-inline-images t)
  (org-startup-folded t)
  (org-list-demote-modify-bullet '(("+" . "-") ("1." . "a.") ("-" . "+")))
  (org-catch-invisible-edits 'smart)
  (org-insert-heading-respect-content t)
  (org-image-actual-width nil)
  (org-imenu-depth 4)
  ;; call C-c C-o explicitly
  (org-return-follows-link nil)
  (org-use-sub-superscripts '{})
  (org-clone-delete-id t)
  (org-yank-adjusted-subtrees t)
  ;; todo
  (org-todo-keywords '((sequence "TODO(t)" "HOLD(h!)" "WIP(i!)" "WAIT(w!)" "|" "DONE(d!)" "CANCELLED(c@/!)")
                       (sequence "REPORT(r)" "BUG(b)" "KNOWNCAUSE(k)" "|" "FIXED(f!)")))
  (org-todo-keyword-faces '(("TODO"       :foreground "#7c7c75" :weight bold)
                            ("HOLD"       :foreground "#feb24c" :weight bold)
                            ("WIP"        :foreground "#0098dd" :weight bold)
                            ("WAIT"       :foreground "#9f7efe" :weight bold)
                            ("DONE"       :foreground "#50a14f" :weight bold)
                            ("CANCELLED"  :foreground "#ff6480" :weight bold)
                            ("REPORT"     :foreground "magenta" :weight bold)
                            ("BUG"        :foreground "red"     :weight bold)
                            ("KNOWNCAUSE" :foreground "yellow"  :weight bold)
                            ("FIXED"      :foreground "green"   :weight bold)))
  (org-use-fast-todo-selection 'expert)
  (org-enforce-todo-dependencies t)
  (org-enforce-todo-checkbox-dependencies t)
  (org-priority-faces '((?A :foreground "red")
                        (?B :foreground "orange")
                        (?C :foreground "yellow")))
  (org-global-properties '(("EFFORT_ALL" . "0:15 0:30 0:45 1:00 2:00 3:00 4:00 5:00 6:00 7:00 8:00")
                           ("APPT_WARNTIME_ALL" . "0 5 10 15 20 25 30 45 60")
                           ("RISK_ALL" . "Low Medium High")
                           ("STYLE_ALL" . "habit")))
  (org-columns-default-format "%25ITEM %TODO %SCHEDULED %DEADLINE %3PRIORITY %TAGS %CLOCKSUM %EFFORT{:}")
  ;; Remove CLOSED: [timestamp] after switching to non-DONE states
  (org-closed-keep-when-no-todo t)
  ;; log
  (org-log-done 'time)
  (org-log-repeat 'time)
  (org-log-redeadline 'note)
  (org-log-reschedule 'note)
  (org-log-into-drawer t)
  (org-log-state-notes-insert-after-drawers nil)
  ;; refile
  (org-refile-use-cache t)
  (org-refile-targets '((org-agenda-files . (:maxlevel . 9))))
  (org-refile-use-outline-path 'file)
  (org-outline-path-complete-in-steps nil)
  (org-refile-allow-creating-parent-nodes 'confirm)
  ;; tags
  (org-tags-column 0)
  (org-use-tag-inheritance nil)
  (org-agenda-use-tag-inheritance nil)
  (org-use-fast-tag-selection t)
  (org-fast-tag-selection-single-key t)
  (org-track-ordered-property-with-tag t)
  (org-tag-persistent-alist '(("READ"  . ?r)
                              ("MAIL"  . ?@)
                              ("WRITE" . ?w)))
  (org-tag-alist '((:startgroup)
                   ("OWNER"    . ?o)
                   ("ASSIGNEE" . ?a)
                   ("OBSERVER" . ?b)
                   ("LEARNING" . ?l)
                   ("READING"  . ?r)
                   ("WRITING"  . ?w)
                   (:endgroup)))
  ;; archive
  ;; (org-archive-location "%s_archive::datetree/")
  )

;; generate toc
(use-package toc-org
  :ensure t
  :hook (org-mode . toc-org-mode))
#+end_src
** Prettify bullets
+ =org-bullets=
#+begin_src emacs-lisp -n
;; (use-package org-bullets
;;   :ensure t
;;   :config
;;   (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+end_src

+ =org-superstar=
Another choice is =org-superstar= which is a descendant of =org-bullets=.
#+begin_src emacs-lisp -n
(use-package org-superstar
  :ensure t
  :hook (org-mode . (lambda ()
                      (org-superstar-mode 1)))
  )
#+end_src
** Prettify table
Download =org-pretty-table.el= from [[https://github.com/Fuco1/org-pretty-table][org-pretty-table]] and put it to =~/.emacs.d/lisp/=
#+begin_src emacs-lisp -n
(require 'org-pretty-table)
(add-hook 'org-mode-hook (lambda () (org-pretty-table-mode)))
#+end_src
** Enhance refile to a new file
Refile to a new org file. Refer to:
https://stackoverflow.com/questions/33885244/emacs-org-mode-how-can-i-refile-a-subtree-to-a-new-file
#+begin_src emacs-lisp
(defun my/org-file-from-subtree (&optional name)
  "Cut the subtree currently being edited and create a new file
from it.

If called with the universal argument, prompt for new filename,
otherwise use the subtree title."
  (interactive "P")
  (org-back-to-heading)
  (let ((filename (cond
                   (current-prefix-arg
                    (expand-file-name
                     (read-file-name "New file name: ")))
                   (t
                    (concat
                     (expand-file-name
                      (org-element-property :title
                                            (org-element-at-point))
                      default-directory)
                     ".org")))))
    (org-cut-subtree)
    (find-file-noselect filename)
    (with-temp-file filename
      (org-mode)
      (yank))))

;; set to C-c M-n to refile to a new file
(define-key org-mode-map (kbd "C-c M-n") 'my/org-file-from-subtree)
#+end_src
** Agenda settings
#+begin_src emacs-lisp
(use-package org-agenda
  :ensure nil
  :after org
  :hook (org-agenda-finalize . org-agenda-to-appt)
  :config
  ;; update appt list every 5 minutes
  (run-at-time t 300 #'org-agenda-to-appt)
  (advice-add #'org-agenda-to-appt :around #'my/suppress-message)
  :custom
  ;; if you want to keep all org files in monitor, use following setting:
  ;; (org-agenda-files (directory-files-recursively "~/org/" "\\.org$"))
  ;; if you want to set specific org files to be monitored, use follwoing:
  (org-agenda-files
        '("~/org/tasks.org"
          "~/org/habits.org"
          "~/org/mail.org"
          "~/org/personal.org"))
  ;; (org-agenda-files (list (expand-file-name "tasks.org" org-directory)))
  (org-agenda-diary-file (expand-file-name "diary.org" org-directory))
  (org-agenda-insert-diary-extract-time t)
  (org-agenda-compact-blocks t)
  (org-agenda-block-separator nil)
  (org-agenda-sticky t)
  ;; holidays
  (org-agenda-include-diary t)
  (org-agenda-include-deadlines t)
  (org-agenda-follow-indirect t)
  (org-agenda-inhibit-startup t)
  (org-agenda-show-all-dates t)
  (org-agenda-time-leading-zero t)
  (org-agenda-start-with-log-mode t)
  (org-agenda-start-with-clockreport-mode t)
  (org-agenda-remove-tags t)
  (org-agenda-todo-ignore-with-date nil)
  (org-agenda-todo-ignore-deadlines 'far)
  (org-agenda-todo-ignore-scheduled 'future)
  (org-agenda-todo-ignore-timestamp nil)
  (org-agenda-tags-todo-honor-ignore-options t)
  (org-agenda-skip-deadline-if-done t)
  (org-agenda-skip-scheduled-if-done t)
  (org-agenda-skip-timestamp-if-done t)
  (org-agenda-skip-unavailable-files t)
  (org-agenda-skip-scheduled-delay-if-deadline t)
  (org-agenda-skip-scheduled-if-deadline-is-shown t)
  (org-agenda-skip-additional-timestamps-same-entry t)
  (org-agenda-text-search-extra-files '(agenda-archives))
  (org-agenda-clockreport-parameter-plist
   '(:link t :maxlevel 5 :fileskip0 t :compact nil :narrow 80))
  (org-agenda-columns-add-appointments-to-effort-sum t)
  (org-agenda-restore-windows-after-quit t)
  (org-agenda-window-setup 'current-window)
  ;; starts from Monday
  (org-agenda-start-on-weekday 1)
  (org-agenda-use-time-grid t)
  (org-agenda-timegrid-use-ampm nil)
  (org-agenda-search-headline-for-time nil))

;; Super agenda mode
(use-package org-super-agenda
  :ensure t
  :hook (org-agenda-mode . org-super-agenda-mode)
  :custom
  (org-super-agenda-groups '((:order-multi (1 (:name "Done Today"
                                                     :log closed)
                                              (:name "Clocked Today"
                                                     :log clocked)))
                             (:name "Schedule" :time-grid t)
                             (:name "Today" :scheduled today)
                             (:habit t)
                             (:name "Due Today" :deadline today :face warning)
                             (:name "Overdue" :deadline past :face error)
                             (:name "Due Soon" :deadline future)
                             (:name "Scheduled Earlier" :scheduled past))))

;; holidays settings
(use-package calendar
  :ensure nil
  :hook (calendar-today-visible . calendar-mark-today)
  :custom
  (calendar-chinese-all-holidays-flag t)
  (holiday-local-holidays `((holiday-fixed 3 8  "Women's Day")
                            (holiday-fixed 3 12 "Arbor Day")
                            ,@(cl-loop for i from 1 to 3
                                       collect `(holiday-fixed 5 ,i "International Workers' Day"))
                            (holiday-fixed 5 4  "Chinese Youth Day")
                            (holiday-fixed 6 1  "Children's Day")
                            (holiday-fixed 9 10 "Teachers' Day")
                            ,@(cl-loop for i from 1 to 7
                                       collect `(holiday-fixed 10 ,i "National Day"))
                            (holiday-fixed 10 24 "Programmers' Day")
                            (holiday-fixed 11 11 "Singles' Day")))
  (holiday-other-holidays '((holiday-fixed 4 22 "Earth Day")
                            (holiday-fixed 4 23 "World Book Day")
                            (holiday-sexp '(if (or (zerop (% year 400))
                                                   (and (% year 100) (zerop (% year 4))))
                                               (list 9 12 year)
                                             (list 9 13 year))
                                          "World Programmers' Day")
                            (holiday-fixed 10 10 "World Mental Health Day")))
  (calendar-holidays `(,@holiday-general-holidays
                       ,@holiday-oriental-holidays
                       ,@holiday-christian-holidays
                       ,@holiday-other-holidays
                       ,@holiday-local-holidays))
  (calendar-mark-holidays-flag t)
  (calendar-mark-diary-entries-flag nil)
  ;; Prefer +0800 over CST
  (calendar-time-zone-style 'numeric)
  ;; year/month/day
  (calendar-date-style 'iso))
#+end_src
** Src settings
*** src basic settings
#+begin_src emacs-lisp
(use-package org-src
  :ensure nil
  :after org
  :hook (org-babel-after-execute . org-redisplay-inline-images)
  :bind (:map org-src-mode-map
              ;; consistent with separedit/magit
              ("C-c C-c" . org-edit-src-exit))
  :custom
  (org-src-fontify-natively t)
  (org-src-tab-acts-natively t)
  (org-src-preserve-indentation t)
  (org-src-window-setup 'reorganize-frame)
  (org-confirm-babel-evaluate nil)
  (org-edit-src-content-indentation 0)
  (org-src-lang-modes '(("C"            . c)
                        ("C++"          . c++)
                        ("bash"         . sh)
                        ("cpp"          . c++)
                        ("dot"          . graphviz-dot)
                        ("elisp"        . emacs-lisp)
                        ("python"       . python)
                        ("jupyter-python" . python)
                        ("ein"          . ein)
                        ("mermaid"      . mermaid)
                        ("ocaml"        . tuareg)
                        ("shell"        . sh)
                        ("ditaa"        . artist)
                        ("html"         . browser)
                        ("mysql"        . sql)))
  (org-babel-load-languages '(
                              (python          . t)
                              (awk             . t)
                              (C               . t)
                              (calc            . t)
                              (dot             . t)
                              (emacs-lisp      . t)
                              (eshell          . t)
                              (gnuplot         . t) ;; enable gnuplot to draw 2d/3d graphs
                              (ocaml           . t)
                              (ein             . t)
                              (mermaid         . t)
                              (shell           . t)
                              (browser         . t)
                              (sql             . t)
                              (ditaa           . t)
                              (jupyter         . t)
                              ))
  )
#+end_src
*** Enable HTML in src block
#+begin_src emacs-lisp
;; Org Babel Browser - Render HTML in org-mode
(use-package ob-browser
  :ensure t)
#+end_src
*** Enable ipython src block (abondoned)
#+begin_src emacs-lisp
;; support ipython eval
;; need to hack ob-ipython.el due to following:
;; https://github.com/gregsexton/ob-ipython/issues/161
;; also need to compile again to make ob-ipython.elc work
;; (use-package ob-ipython
;;   :ensure t
;;   :config
;; )

;; set ob-iptyhon resources dir. default is: ./obipy-resources/
;; the directory is consistent with image paste directory.
;; run this func before export any image generation
;; (defun my-set-ob-ipython-resource-dir ()
;;   "set ob-ipython image directory"
;;   (interactive)
;;   (setq foldername (concat (buffer-file-name) ".assets/"))
;;   (if (not (file-exists-p foldername))
;;       (mkdir foldername))
;;   (setq ob-ipython-resources-dir foldername)
;;   )
#+end_src
** Capture settings
*** Basic settings
#+begin_src emacs-lisp
(use-package org-capture
  :ensure nil
  :after org doct
  :hook (
         (org-capture-mode . (lambda ()
                               (setq-local org-complete-tags-always-offer-all-agenda-tags t)))
         (org-capture-mode . delete-other-windows)
         )
  :config
  ;; These variables/functions are used when capturing a minutes of meeting.
  (defvar org-capture--id-copy nil)

  (defun org-id-new-and-save ()
    "Get a new org-id via `org-id-new' then save it."
    (let ((id (org-id-new)))
      (setq org-capture--id-copy id)
      id))

  (defun org-id-load-from-copy ()
    "Read previously allocated org-id from local copy."
    org-capture--id-copy)
  :custom
  ;; `doct' requires that
  (org-capture-templates-contexts nil)
  (org-capture-use-agenda-date t)
  (org-capture-templates
   (doct `(:group
           :empty-lines 1
           :children
           (("Tasks"
             :keys "t"
             :file "tasks.org"
             :children
             (("Inbox"
               :keys "i"
               :type entry
               :prepend t
               :headline "Inbox"
               :template "* %?\n%i\n")
              ("Mail"
               :keys "m"
               :type entry
               :headline "Inbox"
               :template "* TODO %^{type|reply to|contact} %^{recipient} about %^{subject} :MAIL:\n")
              ("Reminder"
               :keys "r"
               :type entry
               :headline "Reminders"
               :template "* TODO %i%?")))
            ("Capture"
             :keys "c"
             :file "capture.org"
             :children
             (("Bookmark"
               :keys "b"
               :type entry
               :headline "Bookmarks"
               :immediate-finish t
               :template "* [[%:link][%:description]] :READ:\n %a\n %i")
              ("Note"
               :keys "n"
               :type entry
               :headline "Notes"
               :template "* %? %^g\n%i\n")
              ("Meeting"
               :keys "m"
               :type entry
               :olp ("Meeting")
               :datetree t
               :jump-to-captured t
               :template ,(concat "* %^{Subject} :MEETING:\n"
                                  ":PROPERTIES:\n"
                                  ":ID:         %(org-id-new-and-save)\n"
                                  ":CREATED:    %<%FT%T%z>\n"
                                  ":END:\n"
                                  "** Present at meeting\n"
                                  "- [ ] %^{Attendees}\n"
                                  "** Agenda\n"
                                  "- Comments and corrections to last meeting notes (delete me)\n"
                                  "- Reports from the sub teams (delete me)\n"
                                  "- Discussion (delete me)\n"
                                  "** Notes\n%?\n"
                                  "** Actions\n"
                                  "#+BEGIN: columnview :id %(org-id-load-from-copy) :match \"/TODO|DONE\" :format \"\\%ITEM(What) \\%TAGS(Who) \\%RISK(Risk Level) \\%DEADLINE(When) \\%TODO(State)\"\n#+END:\n"
                                  "** Decisions\n"
                                  "#+BEGIN: columnview :id %(org-id-load-from-copy) :match \"DECISION\" :format \"\\%ITEM(Decision)\"\n#+END:\n"
                                  ))))))
         ))
  )
#+end_src
*** Others
#+begin_src emacs-lisp
;; Declarative Org Capture Templates
(use-package doct
  :ensure t
  :commands doct doct-get
  :demand t)

(use-package org-edna
  :ensure t
  :hook (org-mode . org-edna-mode)
  :custom
  (org-edna-finder-use-cache t)
  (org-edna-timestamp-format 'long))

(use-package org-protocol
  :ensure nil
  :after org
  :custom
  (org-protocol-default-template-key "cb"))

(use-package org-habit
  :ensure nil
  :after org
  :custom
  (org-habit-show-habits t)
  (org-habit-show-all-today t))
#+end_src
** Link settings
#+begin_src emacs-lisp
;; org links
(use-package ol
  :ensure nil
  :after org
  :custom
  (org-link-keep-stored-after-insertion t)
  (org-link-abbrev-alist '(("Arxiv"         . "https://arxiv.org/abs/")
                           ("GitHub"        . "https://github.com/")
                           ("GitLab"        . "https://gitlab.com/")
                           ("Google"        . "https://google.com/search?q=")
                           ("Baidu"         . "https://baidu.com/s?wd=")
                           ("RFCs"          . "https://tools.ietf.org/html/")
                           ("LWN"           . "https://lwn.net/Articles/")
                           ("StackOverflow" . "https://stackoverflow.com/q/%s")
                           ("WG21"          . "https://wg21.link/")
                           ("Wikipedia"     . "https://en.wikipedia.org/wiki/")
                           ("YouTube"       . "https://youtube.com/watch?v=")
                           ("Zhihu"         . "https://zhihu.com/question/"))))
#+end_src

Link abbreviation usage:
#+begin_example
Take Baidu "test" for example, the link should be like:
[[Baidu:test][baidu test]]
#+end_example
** Tempo template settings
For org-mode, use =org-tempo= instead of =yasnippet=.
#+begin_src emacs-lisp
(use-package org-tempo
  :after org
  :config
  (setq org-structure-template-alist
        '(("s" . "src")
          ("e" . "example")
          ("q" . "quote")
          ("c" . "comment")
          ("v" . "verse")
          ("html" . "src html")
          ("sql" . "src sql -n :results raw drawer :engine mysql :database midea_cs :file-name temp.sql")
          ("exhtml" . "export html")
          ("exmd" . "export md")
          ("el" . "src emacs-lisp -n")
          ("sh" . "src shell -n :file-name: temp.sh")
          ("json" . "src json -n")
          ("jp"  . "src jupyter-python -n :session py :file-name temp.py")
          ("ein" . "src ein-python -n :session localhost :results output :file-name temp.py")
          ("py" . "src python -n :results output :file-name temp.py")))

  ;; complex template definition
  (tempo-define-template "headline-property"
                         '(":PROPERTIES:" n p n ":END:" >)
                         "<P"
                         "Insert a property template" 'org-tempo-tags)
  ;; define ditaa template filename will automatically generated
  (tempo-define-template "org-src-ditaa"
                         '((concat "#+begin_src ditaa :file " (buffer-file-name) ".assets/" (format-time-string "%Y%m%d_%H%M%S") ".png") n p n "#+end_src" >)
                         "<dt"
                         "Insert a src ditaa template" 'org-tempo-tags)
  (tempo-define-template "org-startup"
                         '("#+startup: overview" p)
                         "<st"
                         "Insert a startup property" 'org-tempo-tags)
  (tempo-define-template "org-title"
                         '("#+title: " p)
                         "<ti"
                         "Insert an org title" 'org-tempo-tags)
  (tempo-define-template "org-author"
                         '("#+author: " p)
                         "<au"
                         "Insert an org author" 'org-tempo-tags)
  (tempo-define-template "org-hugo-base-dir"
                         '("#+hugo_base_dir: /Users/randolph/iCloud/Blog" p)
                         "<hb"
                         "Insert hugo base directory" 'org-tempo-tags)
  (tempo-define-template "org-hugo-export-filename"
                         '(":PROPERTIES:" n ":EXPORT_FILE_NAME: " p n ":END:" >)
                         "<he"
                         "Insert hugo export filename" 'org-tempo-tags)
  (tempo-define-template "org-tangle-no"
                         '(":PROPERTIES:" n ":header-args:    :tangle no" n ":END:" >)
                         "<tn"
                         "Insert tangle no property" 'org-tempo-tags)
  (tempo-define-template "org-reveal-split"
                         '("#+REVEAL: split" n p)
                         "<rs"
                         "Insert REVEAL split mark" 'org-tempo-tags)
  )
#+end_src
** Org clock
#+begin_src emacs-lisp
(use-package org-clock
  :ensure nil
  :after org
  :functions notify-send
  :config
  (org-clock-persistence-insinuate)
  :custom
  (org-clock-in-resume t)
  (org-clock-idle-time 15)
  (org-clock-into-drawer t)
  (org-clock-out-when-done t)
  (org-clock-persist 'history)
  (org-clock-history-length 20)
  (org-clock-mode-line-total 'today)
  (org-clock-display-default-range 'thisweek)
  (org-clock-in-switch-to-state "WIP")
  (org-clock-out-switch-to-state "WAIT")
  (org-clock-out-remove-zero-time-clocks t)
  (org-clock-report-include-clocking-task t)
  (org-show-notification-handler (lambda (msg)
                                   (notify-send :title "Org Clock"
                                                :body msg
                                                :timeout 5000
                                                :urgency 'critical))))
#+end_src
** Org Notifications
#+begin_src emacs-lisp -n
;; (use-package org-alert
;;   :ensure t
;;   :config
;;   (setq alert-default-style 'osx-notifier
;;         org-alert-interval 300
;;         org-alert-notification-title "Org Alert Reminder!")
;;   (org-alert-enable)
;;   )
#+end_src
** Exporting settings
*** Basic settings
#+begin_src emacs-lisp
;; export settings. will affect ox-reveal
(use-package ox
  :ensure nil
  :after org
  :config
  (add-to-list 'org-export-backends 'pandoc)
  :custom
  (org-export-with-toc t)
  (org-export-with-tags 'not-in-toc)
  (org-export-with-email t)
  (org-export-with-author t)
  (org-export-with-drawers nil)
  (org-export-with-priority t)
  (org-export-with-footnotes t)
  (org-export-with-smart-quotes t)
  (org-export-with-section-numbers nil)
  (org-export-with-sub-superscripts '{})
  ;; Use :eval never-export header argument to avoid evaluating.
  (org-export-use-babel t)
  (org-export-headline-levels 5)
  (org-export-coding-system 'utf-8)
  (org-export-with-broken-links 'mark)
  ;; (org-export-backends '(ascii html md icalendar man))) ; original value
  )
#+end_src
*** Modify export directory
Make all exported files into =exported= directory.
#+begin_src emacs-lisp
(defun org-export-output-file-name-modified (orig-fun extension &optional subtreep pub-dir)
  (unless pub-dir
    (setq pub-dir "exported")
    (unless (file-directory-p pub-dir)
      (make-directory pub-dir)))
  (apply orig-fun extension subtreep pub-dir nil))
(advice-add 'org-export-output-file-name :around #'org-export-output-file-name-modified)
#+end_src
*** Backend settings
#+begin_src emacs-lisp
(use-package ox-html
  :ensure nil
  :after org
  :custom
  (org-html-doctype "html5")
  (org-html-html5-fancy t)
  (org-html-checkbox-type 'unicode)
  (org-html-validation-link nil))

(use-package htmlize
  :ensure t
  :defer t
  :custom
  (htmlize-pre-style t)
  (htmlize-output-type 'inline-css))

;; use pandoc backend to replace md backend
;; fix code block export problem
(use-package ox-pandoc
  :ensure t
  :defer 8
  :after org
  :custom
  ;; special extensions for markdown_github output
  (setq org-pandoc-format-extensions '(markdown_github+pipe_tables+raw_html))
  )

;; fix pandoc export with html blocks
;; https://github.com/kawabata/ox-pandoc/issues/51
(defun my/ox-pandoc-fix-export-blocks (backend)
  "Wrap all export blocks with =BEGIN_EXPORT org=, so ox-pandoc does not remove them"
  (when (or (eq backend 'pandoc) (eq backend 'org))
    (let (
          (
           blocks
           (org-element-map
               (org-element-parse-buffer)
               'export-block
             'identity
             )
           )
          )
      (seq-map
       (lambda (b)
         (unless (string= (org-element-property :type b) "ORG")
           (goto-char (org-element-property :end b))
           (insert "#+END_EXPORT\n")
           (goto-char (org-element-property :begin b))
           (insert "#+BEGIN_EXPORT org\n,")
           )
         )
       (reverse blocks)
       ))))
(add-hook 'org-export-before-parsing-hook 'my/ox-pandoc-fix-export-blocks)

;; Export org-mode docs as HTML compatible with Twitter Bootstrap.
(use-package ox-twbs
  :ensure t
  :after org
  )
#+end_src
*** Auto numbering settings
#+begin_src emacs-lisp
;; Dynamic headlines numbering
(use-package org-num
  :ensure nil
  :commands org-num-mode
  :after org
  :custom
  (org-num-skip-commented t)
  (org-num-skip-footnotes t)
  (org-num-skip-unnumbered t)
  (org-num-skip-tags `(,org-archive-tag)))
#+end_src
** Blogging via Hugo
*** hugo preparation
**** install hugo first
#+begin_src shell :file-name: temp.sh
brew install hugo
#+end_src
**** set hugo site directory
#+begin_src shell :file-name: temp.sh
hugo new site ~/iCloud/Blog
#+end_src
**** add a theme
Take =hugo-ink= theme for example:
#+begin_src shell :file-name: temp.sh
cd ~/iCloud/Blog/themes
git clone https://github.com/knadh/hugo-ink.git
#+end_src

Add theme config to =config.toml=:
#+begin_src shell :file-name: temp.sh
echo theme = \"hugo-ink\" >> ~/iCloud/Blog/config.toml
#+end_src
**** add some content
The markdown content is under =$hugo-home/content/posts= directory.
#+begin_src shell :file-name: temp.sh
hugo new posts/my-first-post.md
#+end_src
**** start hugo server
#+begin_src shell :file-name: temp.sh
hugo server -D
#+end_src
**** Navigate site at http://localhost:1313/
*** ox-hugo backend configuration
#+begin_src emacs-lisp
(use-package ox-hugo
  :ensure t            ; Auto-install the package from Melpa (optional)
  :after ox
  :config
  (with-eval-after-load 'org-capture
    (defun org-hugo-new-subtree-post-capture-template ()
      "Returns `org-capture' template string for new Hugo post.
See `org-capture-templates' for more information."
      (let* ((title (read-from-minibuffer "Post Title: ")) ; Prompt to enter the post title
             (fname (org-hugo-slug title)))
        (mapconcat #'identity
                   `(
                     ,(concat "* TODO " title)
                     ":PROPERTIES:"
                     ,(concat ":EXPORT_FILE_NAME: " fname)
                     ":END:"
                     "%?\n")          ; Place the cursor here finally
                   "\n")))

    (add-to-list 'org-capture-templates
                 '("h"                ; `org-capture' binding + h
                   "Hugo post"
                   entry
                   ;; It is assumed that below file is present in `org-directory'
                   ;; and that it has a "Blog Ideas" heading. It can even be a
                   ;; symlink pointing to the actual location of all-posts.org!
                   (file+olp "all-posts.org" "Blog Ideas")
                   (function org-hugo-new-subtree-post-capture-template))))
  )
#+end_src
** Enhance image paste from clipboard
Paste image from clipboard via pngpaste. Need to `brew install pngpaste' first:
#+begin_src shell -n :file-name: temp.sh
brew install pngpaste
#+end_src

#+begin_src emacs-lisp
(defun my-org-insert-clipboard-image ()
  "create a time stamped unique-named file from the clipboard in the sub-directory (%filename.assets) as the org-buffer and insert a link to this file."
  (interactive)

  (setq foldername (concat (buffer-file-name) ".assets/"))
  (if (not (file-exists-p foldername))
      (mkdir foldername))

  (setq imgName (concat "img_" (format-time-string "%Y%m%d_%H%M%S") ".png"))
  (setq imgPath (concat (buffer-file-name) ".assets/" imgName))

  (setq relativeFilename (concat "./"
                                 (buffer-name) ".assets/" imgName))

  (shell-command (concat "pngpaste " relativeFilename))

  (insert (concat "[[" relativeFilename "]]"))
  ;; (org-display-inline-images)
  )
;; use Command-V to paste image from clipboard
(define-key org-mode-map (kbd "s-V") 'my-org-insert-clipboard-image)
#+end_src

** Mermaid settings
#+begin_src emacs-lisp
(use-package ob-mermaid
  :ensure t
  :init
  (setq ob-mermaid-cli-path "/usr/local/bin/mmdc")
  )

(use-package mermaid-mode
  :ensure t
  :init
  (setq mermaid-tmp-dir "temp")
  )
#+end_src
** Support ditaa
Use =artist-mode= to draw asciiized picture.
*** ditaa jar settings
#+begin_src emacs-lisp -n
(setq org-ditaa-jar-path "/usr/local/Cellar/ditaa/0.11.0_1/libexec/ditaa-0.11.0-standalone.jar")
#+end_src

*** Ditaa example:
**** GRO Modules:
#+begin_src ditaa :file images/temp.png
                                     GRO Architecture
-----------------------------------------------------------------------------------------------------
                                       Top Modules
 /----------\
 |    GUI   |
 | cRED     |
 +----------+
---------=----------------------------------------------------------------------------------=--------
 +----------+ +-----------\/-----------------\/--------+
 | UCI      | |LUCI-SHARED|| SDK-LIBC-SCRIPT || DNSMASQ|
 | c516     | | cBLU      || cBLU            ||   cBLU |
 +----------+ +-----------/\-----------------/\--------+
-----------------------------------------------------------------------------------------------------
                                       Lower Modules
 +-----------------------------------------------------------------------------------------------+
 |                                         netfilter                                             |
 |  +------------------+                                                                         |
 |  | Access Control   |                                                                         |
 |  |   c277           |                                                                         |
 |  +------------------+                                                                         |
 |                                           cA7A                                                |
 +-----------------------------------------------------------------------------------------------+
 +-----------+  +--------------+
 |SDK-LIBC   |  | Busybox      |
 |cBLU       |  | Driver  cPNK |
 +-----------+  +--------------+
#+end_src

#+RESULTS:
[[file:images/temp.png]]

**** Feature Modules
#+begin_src ditaa :file images/temp1.png
  +-------------+
  |   UCI       |
  |   c516      |
  +------+------+
         | config get
         v                   /----------------------------------------------------\
  +-------------+            | - Translate configratuion items from UCI to uci    |
  | LUCI-SHARED |............| - Provide luci script to bring up feature          |
  |    cBLU     |            | - Provide Ada scripts                              |
  +------+------+            \----------------------------------------------------/
         |
         v
 +----------------+
 | Openwrt config |
 | cGRE           |
 +-------+--------+
         |
         v
+-------------------+         +------------+
|  SDK-LIBC-SCRIPT  +-------->|  DNSMASQ   |
|     cBLU          |         |   cBLU     |
+---------+---------+         +------+-----+
          |                          | (Ada configuration)
          |      /-------------------+
          |      |
          v      v
+-------------------+
|     SDK-LIBC      |
|       cBLU        |
+-------------------+
#+end_src

#+RESULTS:
[[file:images/temp1.png]]

#+begin_src ditaa :file images/temp2.png
    +-----------+        +---------+
    |    PLC    |        |         |
    |  Network  +<------>+   PLC   +<---=---------+
    |    cRED   |        |  c707   |              |
    +-----------+        +----+----+              |
                              ^                   |
                              |                   |
                              |  +----------------|-----------------+
                              |  |                |                 |
                              v  v                v                 v
      +----------+       +----+--+--+      +-------+---+      +-----+-----+       Windows clients
      |          |       |          |      |           |      |           |      +----+      +----+
      | Database +<----->+  Shared  +<---->+ Executive +<-=-->+ Operator  +<---->|cYEL| . . .|cYEL|
      |   c707   |       |  Memory  |      |   c707    |      | Server    |      |    |      |    |
      +--+----+--+       |{d} cGRE  |      +------+----+      |   c707    |      +----+      +----+
         ^    ^          +----------+             ^           +-------+---+
         |    |                                   |
         |    +--------=--------------------------+
         v
+--------+--------+
|                 |
| Millwide System |            -------- Data ---------
| cBLU            |            --=----- Signals ---=--
+-----------------+
#+end_src

#+RESULTS:
[[file:images/temp2.png]]

** Math symbol enhanced via Xah
#+begin_src emacs-lisp
;; Xah Math input mode, to input math symbols via S-SPC
;; http://ergoemacs.org/emacs/xmsi-math-symbols-input.html
(use-package xah-math-input
  :ensure t
  :hook ((org-mode markdown-mode) . xah-math-input-mode-on)
  )
#+end_src
** Mobile sync settings for Beorg
#+begin_src emacs-lisp
(setq org-mobile-directory "~/Library/Mobile Documents/iCloud~com~appsonthemove~beorg/Documents/")
(setq org-mobile-inbox-for-pull "~/Library/Mobile Documents/iCloud~com~appsonthemove~beorg/Documents/")
#+end_src
** Org Presentation
Do presentation with Emacs. We have several choices.
*** Org Reveal
Export org mode to HTML presentation slides.
**** Reveal basic settings
#+begin_src emacs-lisp
(use-package ox-reveal
  :ensure t
  :config
  (setq org-reveal-hlevel 2)
  ;; Avalable themes: night, black, white, league, beige, sky, serif, simple, solarized, blood, moon
  (setq org-reveal-theme "night")
  ;; can also set root to a CDN cloud: https://cdn.jsdelivr.net/npm/reveal.js
  (setq org-reveal-root "https://cdn.jsdelivr.net/npm/reveal.js")
  ;; (setq org-reveal-root (expand-file-name "~/.emacs.d/reveal.js"))
  (setq org-reveal-mathjax t)
  )
#+end_src
**** Force split
If one heading has too many things to fit into one slide, you can split the contents into multiple vertical slides manually, by inserting:
#+begin_example
#+REVEAL: split
#+end_example
**** Raw HTML in slide
Besides the Org contents, you can embed raw HTML contents into slides by placing a =#+REVEAL_HTML= keyword.
*** Org-present
I like org-tree-slide more. Abandon this package.
#+begin_src emacs-lisp
;; (use-package org-present
;;   :ensure t
;;   :commands (org-present)
;;   :config
;;   (defun my/org-present-prepare-slide ()
;;     (org-overview)
;;     (org-show-entry)
;;     (org-present-read-only)
;;     (org-show-children))

;;   (defun my/org-present-hook ()
;;     ;; (setq-local face-remapping-alist '((default (:height 1.5) variable-pitch)
;;     ;;                                    (header-line (:height 4.5) variable-pitch)
;;     ;;                                    (org-code (:height 1.55) org-code)
;;     ;;                                    (org-verbatim (:height 1.55) org-verbatim)
;;     ;;                                    (org-block (:height 1.25) org-block)
;;     ;;                                    (org-block-begin-line (:height 0.7) org-block)))
;;     ;; (setq header-line-format " ")
;;     (org-present-big)
;;     (org-display-inline-images)
;;     (my/org-present-prepare-slide))

;;   (defun my/org-present-quit-hook ()
;;     (setq-local face-remapping-alist '((default variable-pitch default)))
;;     (setq header-line-format nil)
;;     (org-present-small)
;;     (org-present-read-write)
;;     (org-remove-inline-images))

;;   (defun my/org-present-prev ()
;;     (interactive)
;;     (org-present-prev)
;;     (my/org-present-prepare-slide))

;;   (defun my/org-present-next ()
;;     (interactive)
;;     (org-present-next)
;;     (my/org-present-prepare-slide))
;;   :bind (:map org-present-mode-keymap
;;               ("C-c C-k" . my/org-present-prev)
;;               ("C-c C-j" . my/org-present-next))
;;   :hook ((org-present-mode . my/org-present-hook)
;;          (org-present-mode-quit . my/org-present-quit-hook))
;;   )
#+end_src

*** Org-tree-slide
Do presentation with org mode inside Emacs program.
#+begin_src emacs-lisp -n
(use-package org-tree-slide
  :ensure t
  :defer t
  :after org
  :commands org-tree-slide-mode
  :bind (:map org-tree-slide-mode-map
              ("C-c C-q" . my/org-end-presentation)
              ("C-c C-n" . org-tree-slide-move-next-tree)
              ("C-c C-p" . org-tree-slide-move-previous-tree))
  :hook (org-tree-slide-play . my/org-start-presentation)
  ;; (org-tree-slide-stop . my/org-end-presentation)
  :config
  (defun my/org-start-presentation ()
    ;; (interactive)
    (org-display-inline-images)
    ;; (org-tree-slide-mode 1)
    (setq text-scale-mode-amount 3)
    (text-scale-mode 1)
    )

  (defun my/org-end-presentation ()
    (interactive)
    (text-scale-mode 0)
    (org-tree-slide-mode 0)
    )
  :custom
  (org-tree-slide-in-effect t)
  (org-tree-slide-activate-message "Presentation started.")
  (org-tree-slide-deactivate-message "Presentation ended.")
  (org-tree-slide-header t)
  (org-image-actual-width nil)
  )
#+end_src
** Grab links from different Mac Apps
This is included in contrib package.
#+begin_src emacs-lisp
(use-package org-mac-link
  :ensure nil
  :after org
  :when (eq system-type 'darwin)
  :custom
  (org-mac-grab-Acrobat-app-p nil "Disable grabbing from Adobe Acrobat")
  (org-mac-grab-devonthink-app-p nil "Disable grabbinb from DevonThink")
  :bind
  (:map org-mode-map
   ("\e\e g" . org-mac-grab-link)))
#+end_src
** Automatically “Tangle” on save
See [[https://leanpub.com/lit-config/read#leanpub-auto-configuring-emacs-and--org-mode-for-literate-programming][Literate configuration]] for details.
#+begin_src emacs-lisp
;; Since we don't want to disable org-confirm-babel-evaluate all
;; of the time, do it around the after-save-hook
(defun my/org-babel-tangle-dont-ask ()
  ;; Dynamic scoping to the rescue
  (let ((org-confirm-babel-evaluate nil))
    (org-babel-tangle)))

(add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'my/org-babel-tangle-dont-ask
                                              'run-at-end 'only-in-org-mode)))
#+end_src
** Others org mode settings
#+begin_src emacs-lisp
(use-package org-id
  :ensure nil
  :after org
  :custom
  (org-id-link-to-org-use-id 'create-if-interactive-and-no-custom-id))

(use-package org-goto
  :ensure nil
  :after org
  :custom
  (org-goto-auto-isearch nil)
  (org-goto-interface 'outline-path-completion))

(use-package org-table
  :ensure nil
  :after org
  :custom
  (org-table-header-line-p t)
  (org-table-export-default-format "orgtbl-to-csv")
  (org-table-formula-constants '(("PI" . "3.14159265358979323846264"))))
#+end_src
** org mode tips
*** Some useful key-bindings
| key       | description                                                         |
|-----------+---------------------------------------------------------------------|
| C-c C-x p | insert properties for headline (we have already set <P in org-tempo |
| C-c C-t   | change TODO state                                                   |
| C-c C-d   | set deadline date                                                   |
| C-c C-s   | set schedule date                                                   |

* Markdown settings
#+begin_src emacs-lisp
(use-package markdown-mode
  :ensure t
  :init
  (advice-add #'markdown--command-map-prompt :override #'ignore)
  (advice-add #'markdown--style-map-prompt   :override #'ignore)
  :mode ("README\\(?:\\.md\\)?\\'" . gfm-mode)
  :hook (
         (markdown-mode . visual-line-mode)
         (markdown-mode . orgtbl-mode)
         )
  :bind (:map markdown-mode-style-map
         ("r" . markdown-insert-ruby-tag)
         ("d" . markdown-insert-details))
  :config
  (defun markdown-insert-ruby-tag (text ruby)
    "Insert ruby tag with `TEXT' and `RUBY' quickly."
    (interactive "sText: \nsRuby: \n")
    (insert (format "<ruby>%s<rp>(</rp><rt>%s</rt><rp>)</rp></ruby>" text ruby)))

  (defun markdown-insert-details (title)
    "Insert details tag (collapsible) quickly."
    (interactive "sTitle: ")
    (insert (format "<details><summary>%s</summary>\n\n</details>" title)))

  ;; (with-eval-after-load 'evil-collection
  ;;   (evil-collection-define-key 'normal 'markdown-mode-map
  ;;     (kbd "<tab>") 'markdown-cycle
  ;;     (kbd "S-<tab>") 'markdown-shifttab))

  :custom
  (markdown-header-scaling t)
  (markdown-enable-wiki-links t)
  (markdown-italic-underscore t)
  (markdown-asymmetric-header t)
  (markdown-split-window-direction 'right)
  (markdown-make-gfm-checkboxes-buttons t)
  (markdown-gfm-uppercase-checkbox t)
  (markdown-fontify-code-blocks-natively t)
  (markdown-content-type "application/xhtml+xml")
  (markdown-css-paths '("https://cdn.jsdelivr.net/npm/github-markdown-css/github-markdown.min.css"
                        "https://cdn.jsdelivr.net/gh/highlightjs/cdn-release/build/styles/github.min.css"))
  (markdown-xhtml-header-content "
<meta name='viewport' content='width=device-width, initial-scale=1, shrink-to-fit=no'>
<style>
body {
  box-sizing: border-box;
  max-width: 740px;
  width: 100%;
  margin: 40px auto;
  padding: 0 10px;
}
</style>
<link rel='stylesheet' href='https://cdn.jsdelivr.net/gh/highlightjs/cdn-release/build/styles/default.min.css'>
<script src='https://cdn.jsdelivr.net/gh/highlightjs/cdn-release/build/highlight.min.js'></script>
<script>
document.addEventListener('DOMContentLoaded', () => {
  document.body.classList.add('markdown-body');
  document.querySelectorAll('pre code').forEach((code) => {
    if (code.className != 'mermaid') {
      hljs.highlightBlock(code);
    }
  });
});
</script>
<script src='https://unpkg.com/mermaid@8.4.8/dist/mermaid.min.js'></script>
<script>
mermaid.initialize({
  theme: 'default',  // default, forest, dark, neutral
  startOnLoad: true
});
</script>
"
                                 )
  (markdown-gfm-additional-languages "Mermaid")
  ;; `multimarkdown' is necessary for `highlight.js' and `mermaid.js'
  (when (executable-find "multimarkdown")
    (setq markdown-command "multimarkdown"))
  ;; Use `which-key' instead
  (with-no-warnings
    (advice-add #'markdown--command-map-prompt :override #'ignore)
    (advice-add #'markdown--style-map-prompt   :override #'ignore))
  :config
  (add-to-list 'markdown-code-lang-modes '("mermaid" . mermaid-mode))

  ;; Preview with built-in webkit
  ;; (with-no-warnings
  ;;   (defun my-markdown-export-and-preview (fn)
  ;;     "Preview with `xwidget' if applicable, otherwise with the default browser."
  ;;     (if (featurep 'xwidget-internal)
  ;;         (centaur-webkit-browse-url (concat "file://" (markdown-export)) t)
  ;;       (funcall fn)))
  ;;   (advice-add #'markdown-export-and-preview :around #'my-markdown-export-and-preview))
  )
#+end_src
* Shell settings
** Eshell settings
#+begin_src emacs-lisp
;; the Emacs shell & friends
(use-package eshell
  :ensure nil
  :defines eshell-prompt-regexp
  :functions eshell/alias
  :hook ((eshell-mode . (lambda ()
                         (term-mode-common-init)
                         ;; Remove cmd args word by word
                         (modify-syntax-entry ?- "w")
                         ;; Eshell is not fully functional
                         (setenv "PAGER" "cat")))
         (eshell-after-prompt . eshell-prompt-read-only)
         (eshell-mode . (lambda ()
                         (bind-key "C-l" 'eshell/clear eshell-mode-map)
                         ;; Aliases
                         (eshell/alias "f" "find-file $1")
                         (eshell/alias "fo" "find-file-other-window $1")
                         (eshell/alias "d" "dired $1")
                         (eshell/alias "l" "ls -lFh")
                         (eshell/alias "ll" "ls -lh")
                         (eshell/alias "l." "ls -dh .*")
                         (eshell/alias "la" "ls -lAFh")
                         (eshell/alias "lr" "ls -tRFh")
                         (eshell/alias "lrt" "ls -lFcrth")
                         (eshell/alias "lsa" "ls -lah")
                         (eshell/alias "lt" "ls -ltFh"))))
  :config
  ;; Prevent accident typing
  (defalias 'eshell/vi 'find-file)
  (defalias 'eshell/vim 'find-file)

  (defun eshell/icd ()
    "Interactive cd."
    (let ((dir (my/interactive "Dcd " dir)))
      (cl-destructuring-bind (d) dir
        (insert (concat "cd " d)))
      (eshell-send-input)))

  (defun eshell/for-each (cmd &rest args)
    "Run CMD for each ARG."
    (let ((f (intern cmd))
          (orig-dir default-directory))
      (dolist (arg (flatten-list args))
        (let ((default-directory orig-dir))
          (funcall f arg)))))

  (defun eshell/in-term (program &rest args)
    "Run the specified PROGRAM in a terminal emulation buffer.
ARGS are passed to the PROGRAM."
    (let* ((term-buf (generate-new-buffer (concat "*" program "*")))
           (eshell-buf (current-buffer)))
      (pop-to-buffer term-buf)
      (with-current-buffer term-buf
        (term-mode)
        (setq-local eshell-parent-buffer eshell-buf)
        (term-exec term-buf program program nil args)
        (term-char-mode))))

  (defun eshell-prompt ()
    "Prompt for eshell."
    (require 'shrink-path)
    (concat
     (propertize user-login-name 'face 'font-lock-keyword-face)
     "@"
     "Mac "
     (if (equal (eshell/pwd) "~")
         "~"
       (abbreviate-file-name (shrink-path-file (eshell/pwd))))
     " "
     (if-let* ((vc (ignore-errors (vc-responsible-backend default-directory)))
               (br (car (vc-git-branches))))
         (concat (propertize "(" 'face 'success)
                 (format "%s" vc)
                 (propertize ")" 'face 'success)
                 (propertize "-" 'face 'font-lock-string-face)
                 (propertize "[" 'face 'success)
                 (propertize br 'face 'font-lock-constant-face)
                 (propertize "]" 'face 'success)
                 " ")
       "")
     "% "))

  (defun eshell-prompt-read-only ()
    "Make eshell's prompt read-only."
    (add-text-properties
     (point-at-bol)
     (point)
     '(rear-nonsticky t
       field output
       read-only t
       inhibit-line-move-field-capture t)))

  :custom
  (eshell-banner-message
   '(format "%s %s\n"
            (propertize (format " %s " (string-trim (buffer-name)))
                        'face 'mode-line-highlight)
            (propertize (current-time-string)
                        'face 'font-lock-keyword-face)))
  (eshell-scroll-to-bottom-on-input 'all)
  (eshell-scroll-to-bottom-on-output 'all)
  (eshell-kill-on-exit t)
  (eshell-kill-processes-on-exit t)
  ;; Don't record command in history if starts with whitespace
  (eshell-input-filter 'eshell-input-filter-initial-space)
  (eshell-error-if-no-glob t)
  (eshell-glob-case-insensitive t)
  (eshell-highlight-prompt nil)
  (eshell-prompt-regexp "^[^@]+@[^ ]+ [^ ]+ \\(([a-zA-Z]+)-\\[[a-zA-Z]+\\] \\)?% ")
  (eshell-prompt-function 'eshell-prompt))

(use-package em-hist
  :ensure nil
  ;; :bind (:map eshell-hist-mode-map
  ;;        ("M-r" . counsel-esh-history))
  :custom
  (eshell-history-size 1024)
  (eshell-hist-ignoredups t)
  (eshell-save-history-on-exit t))

(use-package em-term
  :ensure nil
  :custom
  (eshell-visual-commands '("top" "htop" "less" "more" "bat"))
  (eshell-visual-subcommands '(("git" "help" "lg" "log" "diff" "show")))
  (eshell-visual-options '(("git" "--help" "--paginate")))
  (eshell-destroy-buffer-when-process-dies t))

(use-package em-cmpl
  :ensure nil
  :custom
  (eshell-cmpl-autolist t)
  (eshell-cmpl-ignore-case t)
  (eshell-cmpl-cycle-completions nil)
  (eshell-cmpl-dir-ignore (rx string-start
                              (or "." ".." "CVS" ".svn" ".git")
                              string-end))
  (eshell-cmpl-file-ignore (rx (or "~" ".elc" ".pyc" ".swp")
                               string-end)))

(use-package em-rebind
  :ensure nil
  :commands eshell-delchar-or-maybe-eof)
#+end_src
** Term settings
#+begin_src emacs-lisp -n
(use-package term
  :ensure nil
  :hook (term-mode . (lambda ()
                       (term-mode-common-init)
                       (my/buffer-auto-close)
                       (when-let* ((proc (ignore-errors (get-buffer-process (current-buffer)))))
                         ;; Don't prompt about processes when killing term
                         (set-process-query-on-exit-flag proc nil))))
  :bind (:map term-raw-map
              ("C-c C-y" . term-paste)
              ;; Don't capture my keys!
              ("M-:" . nil)
              ;; ("M-x" . nil)
              ;; ("C-h" . nil)
              ("C-u" . nil))
  :config
  (when (eq system-type 'darwin)
    (define-key term-raw-map (kbd "H-v") 'term-paste))

  (defun term-mode-common-init ()
    "The common initialization for term."
    (setq-local scroll-margin 0)
    (setq-local truncate-lines t)
    ;; (setq-local global-hl-line-mode nil)
    ;; (when (bound-and-true-p evil-mode)
    ;;   (setq-local evil-insert-state-cursor 'box)
    ;;   (evil-insert-state))
    )

  (defun zsh ()
    "Open term with zsh"
    (interactive)
    (set-buffer (make-term "terminal" explicit-shell-file-name))
    (term-mode)
    (term-char-mode)
    (switch-to-buffer "*terminal*"))

  :custom
  (explicit-shell-file-name "/bin/zsh") ; set to bash if you prefer bash
  (term-input-ignoredups t)
  (term-completion-autolist t)
  (term-scroll-to-bottom-on-output 'all)
  ;; (term-prompt-regexp "^[^#$%>\n]*[#$%>] *")
  )
#+end_src

#+begin_quote
If you encounter some bad codes such as "]133;B" in front of =PS1 prompt=, you can try =rm ~/.iterm2_shell_integration.zsh=
#+end_quote
** Term color
#+begin_src emacs-lisp -n
(use-package eterm-256color
  :ensure t
  :hook (term-mode . eterm-256color-mode))
#+end_src
* Company settings
** Basic company settings
#+begin_src emacs-lisp
(use-package company
  :ensure t
  :hook (after-init . global-company-mode)
  :bind (:map company-mode-map
         ([remap completion-at-point] . company-complete)
         :map company-active-map
         ;; The spacemacs binding style
         ;; ("C-/"     . counsel-company)
         ("C-p"     . company-select-previous)
         ("C-n"     . company-select-next)
         ("C-s"     . company-filter-candidates)
         ([tab]     . company-complete-common-or-cycle)
         ([backtab] . company-select-previous-or-abort)
         :map company-search-map
         ("C-p"    . company-select-previous)
         ("C-n"    . company-select-next))
  :config
  (setq global-company-mode '(not erc-mode message-mode help-mode gud-mode))

  :custom
  (company-idle-delay 0.8)
  (company-show-numbers t)
  (company-require-match nil)
  (company-minimum-prefix-length 3)
  (company-selection-wrap-around t)
  (company-tooltip-align-annotations t)
  (company-tooltip-flip-when-above t)
  (company-tooltip-offset-display nil)
  (company-tooltip-width-grow-only t)
  ;; complete `abbrev' only in current buffer
  (company-dabbrev-other-buffers nil)
  ;; make dabbrev case-sensitive
  (company-dabbrev-ignore-case nil)
  (company-dabbrev-downcase nil)
  ;; make dabbrev-code case-sensitive
  (company-dabbrev-code-ignore-case nil)
  (company-dabbrev-code-everywhere t)
  ;; call `tempo-expand-if-complete' after completion
  (company-tempo-expand t)
  (company-frontends '(company-pseudo-tooltip-frontend
                       company-echo-metadata-frontend))
  (company-backends '((company-capf :with company-tempo)
                      company-files
                      (company-dabbrev-code company-etags company-keywords)
                      company-dabbrev))
  (defun smarter-tab-to-complete ()
    "Try to `org-cycle', `yas-expand', and `yas-next-field' at current cursor position.

If all failed, try to complete the common part with `company-complete-common'"
    (interactive)
    (if yas-minor-mode
        (let ((old-point (point))
              (old-tick (buffer-chars-modified-tick))
              (func-list '(org-cycle yas-expand yas-next-field)))
          (catch 'func-suceed
            (dolist (func func-list)
              (ignore-errors (call-interactively func))
              (unless (and (eq old-point (point))
                           (eq old-tick (buffer-chars-modified-tick)))
                (throw 'func-suceed t)))
            (company-complete-common)))))
  )
#+end_src
** Quickhelp
#+begin_src emacs-lisp
(use-package company-quickhelp
  :ensure t
  :after company
  :defines company-quickhelp-delay
  :bind (:map company-active-map
              ([remap company-show-doc-buffer] . company-quickhelp-manual-begin))
  :hook (global-company-mode . company-quickhelp-mode)
  :init (setq company-quickhelp-delay 0.8))
#+end_src
** company box frontend
#+begin_src emacs-lisp
(use-package company-box
  :ensure t
  :diminish
  :if (display-graphic-p)
  :defines company-box-icons-all-the-icons
  :hook (company-mode . company-box-mode)
  :custom
  (company-box-backends-colors nil)
  :config
  (with-no-warnings
    ;; Prettify icons
    (defun my-company-box-icons--elisp (candidate)
      (when (derived-mode-p 'emacs-lisp-mode)
        (let ((sym (intern candidate)))
          (cond ((fboundp sym) 'Function)
                ((featurep sym) 'Module)
                ((facep sym) 'Color)
                ((boundp sym) 'Variable)
                ((symbolp sym) 'Text)
                (t . nil)))))
    (advice-add #'company-box-icons--elisp :override #'my-company-box-icons--elisp))

  (when (and (display-graphic-p)
             (require 'all-the-icons nil t))
    (declare-function all-the-icons-faicon 'all-the-icons)
    (declare-function all-the-icons-material 'all-the-icons)
    (declare-function all-the-icons-octicon 'all-the-icons)
    (setq company-box-icons-all-the-icons
          `((Unknown . ,(all-the-icons-material "find_in_page" :height 0.8 :v-adjust -0.15))
            (Text . ,(all-the-icons-faicon "text-width" :height 0.8 :v-adjust -0.02))
            (Method . ,(all-the-icons-faicon "cube" :height 0.8 :v-adjust -0.02 :face 'all-the-icons-purple))
            (Function . ,(all-the-icons-faicon "cube" :height 0.8 :v-adjust -0.02 :face 'all-the-icons-purple))
            (Constructor . ,(all-the-icons-faicon "cube" :height 0.8 :v-adjust -0.02 :face 'all-the-icons-purple))
            (Field . ,(all-the-icons-octicon "tag" :height 0.85 :v-adjust 0 :face 'all-the-icons-lblue))
            (Variable . ,(all-the-icons-octicon "tag" :height 0.85 :v-adjust 0 :face 'all-the-icons-lblue))
            (Class . ,(all-the-icons-material "settings_input_component" :height 0.8 :v-adjust -0.15 :face 'all-the-icons-orange))
            (Interface . ,(all-the-icons-material "share" :height 0.8 :v-adjust -0.15 :face 'all-the-icons-lblue))
            (Module . ,(all-the-icons-material "view_module" :height 0.8 :v-adjust -0.15 :face 'all-the-icons-lblue))
            (Property . ,(all-the-icons-faicon "wrench" :height 0.8 :v-adjust -0.02))
            (Unit . ,(all-the-icons-material "settings_system_daydream" :height 0.8 :v-adjust -0.15))
            (Value . ,(all-the-icons-material "format_align_right" :height 0.8 :v-adjust -0.15 :face 'all-the-icons-lblue))
            (Enum . ,(all-the-icons-material "storage" :height 0.8 :v-adjust -0.15 :face 'all-the-icons-orange))
            (Keyword . ,(all-the-icons-material "filter_center_focus" :height 0.8 :v-adjust -0.15))
            (Snippet . ,(all-the-icons-material "format_align_center" :height 0.8 :v-adjust -0.15))
            (Color . ,(all-the-icons-material "palette" :height 0.8 :v-adjust -0.15))
            (File . ,(all-the-icons-faicon "file-o" :height 0.8 :v-adjust -0.02))
            (Reference . ,(all-the-icons-material "collections_bookmark" :height 0.8 :v-adjust -0.15))
            (Folder . ,(all-the-icons-faicon "folder-open" :height 0.8 :v-adjust -0.02))
            (EnumMember . ,(all-the-icons-material "format_align_right" :height 0.8 :v-adjust -0.15))
            (Constant . ,(all-the-icons-faicon "square-o" :height 0.8 :v-adjust -0.1))
            (Struct . ,(all-the-icons-material "settings_input_component" :height 0.8 :v-adjust -0.15 :face 'all-the-icons-orange))
            (Event . ,(all-the-icons-octicon "zap" :height 0.8 :v-adjust 0 :face 'all-the-icons-orange))
            (Operator . ,(all-the-icons-material "control_point" :height 0.8 :v-adjust -0.15))
            (TypeParameter . ,(all-the-icons-faicon "arrows" :height 0.8 :v-adjust -0.02))
            (Template . ,(all-the-icons-material "format_align_left" :height 0.8 :v-adjust -0.15)))
          company-box-icons-alist 'company-box-icons-all-the-icons)))
#+end_src
** Company tabnine
See [[https://www.tabnine.com][tabnine]] for details. Run M-x =company-tabnine-install-binary= to download binaries first.
#+begin_src emacs-lisp
(use-package company-tabnine
  :ensure t
  :defer 1
  :bind
  (("M-q" . company-other-backend)
   ("C-z t" . company-tabnine))
  :custom
  (company-tabnine-max-num-results 9)
  :hook
  (lsp-after-open . (lambda ()
                      (setq company-tabnine-max-num-results 3)
                      (add-to-list 'company-transformers 'company//sort-by-tabnine t)
                      (add-to-list 'company-backends '(company-capf :with company-tabnine :separate))))
  (kill-emacs . company-tabnine-kill-process)
  :config
  ;; if company-tabnine-always-trigger set to t will overload company-minimum-prefix-length value to 0
  (setq company-tabnine-always-trigger nil)

  ;; Enable TabNine on default
  (add-to-list 'company-backends #'company-tabnine)

  ;; Integrate company-tabnine with lsp-mode
  (defun company//sort-by-tabnine (candidates)
    (if (or (functionp company-backend)
            (not (and (listp company-backend) (memq 'company-tabnine company-backends))))
        candidates
      (let ((candidates-table (make-hash-table :test #'equal))
            candidates-lsp
            candidates-tabnine)
        (dolist (candidate candidates)
          (if (eq (get-text-property 0 'company-backend candidate)
                  'company-tabnine)
              (unless (gethash candidate candidates-table)
                (push candidate candidates-tabnine))
            (push candidate candidates-lsp)
            (puthash candidate t candidates-table)))
        (setq candidates-lsp (nreverse candidates-lsp))
        (setq candidates-tabnine (nreverse candidates-tabnine))
        (nconc (seq-take candidates-tabnine 3)
               (seq-take candidates-lsp 6))))))
#+end_src
** Others
*** Better sorting and filtering.
#+begin_src emacs-lisp
(use-package company-prescient
  :ensure t
  :init (company-prescient-mode 1))
#+end_src
* Development settings
** Highlight "TODO" in code
#+begin_src emacs-lisp
;; Highlight TODO
(use-package hl-todo
  :ensure t
  :hook (after-init . global-hl-todo-mode)
  :bind (:map hl-todo-mode-map
         ("C-c t p" . hl-todo-previous)
         ("C-c t n" . hl-todo-next)
         ("C-c t o" . hl-todo-occur))
  :config
  (dolist (keyword '("BUG" "ISSUE" "NB"))
    (cl-pushnew `(,keyword . ,(face-foreground 'error)) hl-todo-keyword-faces)))
#+end_src
** Comment settings
#+begin_src emacs-lisp
(use-package newcomment
  :ensure nil
  :bind ([remap comment-dwim] . #'comment-or-uncomment)
  :config
  (defun comment-or-uncomment ()
    "Comment or uncomment the current line or region.
If the region is active and `transient-mark-mode' is on, call `comment-or-uncomment-region'.
Else, if the current line is empty, insert a comment and indent it.
Else, call `comment-or-uncomment-region' on the current line."
    (interactive)
    (if (region-active-p)
        (comment-or-uncomment-region (region-beginning) (region-end))
      (if (save-excursion
            (beginning-of-line)
            (looking-at "\\s-*$"))
          (comment-dwim nil)
        (comment-or-uncomment-region (line-beginning-position) (line-end-position)))))
  :custom
  ;; `auto-fill' inside comments.
  ;;
  ;; The quoted text in `message-mode' are identified as comments, so only
  ;; quoted text can be `auto-fill'ed.
  (comment-auto-fill-only-comments t))
#+end_src
** Git settings
*** Magit
#+begin_src emacs-lisp
(use-package magit
  :ensure t
  :hook (git-commit-mode . flyspell-mode)
  :bind (("C-x g"   . magit-status)
         ("C-x M-g" . magit-dispatch)
         ("C-c M-g" . magit-file-dispatch))
  :custom
  (magit-diff-refine-hunk t)
  (magit-ediff-dwim-show-on-hunks t))
#+end_src
*** Visual Ediff
#+begin_src emacs-lisp
;; Visual diff interface
(use-package ediff
  :ensure nil
  :hook (ediff-quit . tab-bar-history-back)
  :custom
  (ediff-diff-options "-w") ;; turn off whitespace checking
  (ediff-highlight-all-diffs t)
  (ediff-window-setup-function 'ediff-setup-windows-plain)
  (ediff-split-window-function 'split-window-horizontally)
  (ediff-merge-split-window-function 'split-window-horizontally))
#+end_src
** Projectile settings
#+begin_src emacs-lisp
;; Project management
(use-package projectile
  :ensure t
  :hook (after-init . projectile-mode)
  :bind (:map projectile-mode-map
         ("C-c p" . projectile-command-map))
  ;; :config
  ;; (dolist (dir '("bazel-bin"
  ;;                "bazel-out"
  ;;                "bazel-testlogs"))
  ;;   (add-to-list 'projectile-globally-ignored-directories dir))
  :custom
  (projectile-use-git-grep t)
  (projectile-indexing-method 'alien)
  ;; Ignore uninterested files
  (projectile-globally-ignored-files '("TAGS" ".DS_Store"))
  (projectile-globally-ignored-file-suffixes '(".elc" ".pyc" ".o" ".swp" ".so" ".a"))
  (projectile-ignored-projects `("~/"
                                 "/tmp/"
                                 "/private/tmp/"
                                 ,(file-truename (expand-file-name "elpa" user-emacs-directory)))))

;; install ag frontend package to use projectile-ag
(use-package ag
  :ensure t
  )
#+end_src
** Auto insert shebang
#+begin_src emacs-lisp
(auto-insert-mode)  ;;; Adds hook to find-files-hook
(setq auto-insert-query nil) ;; 不提醒
(defun my/insert-string()
  (concat
   "# " (make-string 80 ?*)
   "\n"
   "# Copyright © " (substring (current-time-string) -4) " \n"
   "# File Name: " (file-name-nondirectory buffer-file-name) "\n"
   ;; "# Author: " (user-full-name)"\n"
   ;; "# Email: " user-mail-address "\n"
   "# Created: " (format-time-string "%Y-%m-%d %T (%Z)" (current-time)) "\n"
   "# Last Update: \n"
   "#          By: \n"
   "# Description: \n"
   "# " (make-string 80 ?*)))

(setq auto-insert-alist
      '(
        ((python-mode . "Python program") nil
         "#!/usr/bin/env python\n"
         "# -*- coding: utf-8 -*-\n"
         ;; (my/insert-string)
         "\n")
        ((sh-mode . "Shell script") nil
         "#!/bin/sh\n"
         ;; (my/insert-string)
         "\n")
        ))
#+end_src
** Flycheck and flymake settings
#+begin_src emacs-lisp
;; (use-package flycheck
;;   :ensure t
;;   :diminish
;;   :commands flycheck-redefine-standard-error-levels
;;   ;; :hook (after-init . global-flycheck-mode)
;;   :init (setq ;; flycheck-global-modes
;;               ;; '(not text-mode outline-mode fundamental-mode lisp-interaction-mode lsp-mode python-mode org-mode diff-mode shell-mode eshell-mode term-mode vterm-mode)
;;               flycheck-emacs-lisp-load-path 'inherit
;;               flycheck-indication-mode (if (display-graphic-p)
;;                                            'right-fringe
;;                                          'right-margin)
;;               ;; Only check while saving and opening files
;;               flycheck-check-syntax-automatically '(save mode-enabled))
;;   :config
;;   ;; Prettify indication styles
;;   (when (fboundp 'define-fringe-bitmap)
;;     (define-fringe-bitmap 'flycheck-fringe-bitmap-arrow
;;       [16 48 112 240 112 48 16] nil nil 'center))
;;   (flycheck-redefine-standard-error-levels "⏴" 'flycheck-fringe-bitmap-arrow)

;;   ;; Display Flycheck errors
;;   (use-package flycheck-posframe
;;     :ensure t
;;     :custom-face
;;     (flycheck-posframe-face ((t (:foreground ,(face-foreground 'success)))))
;;     (flycheck-posframe-info-face ((t (:foreground ,(face-foreground 'success)))))
;;     :hook (flycheck-mode . flycheck-posframe-mode)
;;     :init (setq flycheck-posframe-border-width 4
;;                 flycheck-posframe-inhibit-functions
;;                 '((lambda (&rest _) (bound-and-true-p company-backend)))))
;;   (use-package flycheck-popup-tip
;;     :ensure t
;;     :hook (flycheck-mode . flycheck-popup-tip-mode)))

(use-package flycheck
  :ensure t
  :defer t
  :diminish
  :hook (after-init . global-flycheck-mode)
  :commands (flycheck-add-mode)
  :custom
  (flycheck-global-modes
   '(not outline-mode diff-mode shell-mode eshell-mode term-mode))
  (flycheck-emacs-lisp-load-path 'inherit)
  (flycheck-indication-mode (if (display-graphic-p) 'right-fringe 'right-margin))
  :init
  (if (display-graphic-p)
      (use-package flycheck-posframe
        :ensure t
        :custom-face
        (flycheck-posframe-face ((t (:foreground ,(face-foreground 'success)))))
        (flycheck-posframe-info-face ((t (:foreground ,(face-foreground 'success)))))
        :hook (flycheck-mode . flycheck-posframe-mode)
        :custom
        (flycheck-posframe-position 'window-bottom-left-corner)
        (flycheck-posframe-border-width 3)
        (flycheck-posframe-inhibit-functions
         '((lambda (&rest _) (bound-and-true-p company-backend)))))
    (use-package flycheck-pos-tip
      :ensure t
      :defines flycheck-pos-tip-timeout
      :hook (flycheck-mode . flycheck-pos-tip-mode)
      :custom (flycheck-pos-tip-timeout 30)))
  :config
  (use-package flycheck-popup-tip
    :ensure t
    :hook (flycheck-mode . flycheck-popup-tip-mode))
  (when (fboundp 'define-fringe-bitmap)
    (define-fringe-bitmap 'flycheck-fringe-bitmap-double-arrow
      [16 48 112 240 112 48 16] nil nil 'center))
  (when (executable-find "vale")
    (use-package flycheck-vale
      :ensure t
      :config
      (flycheck-vale-setup)
      (flycheck-add-mode 'vale 'latex-mode))))
#+end_src
** lsp mode
*** lsp install and settings
#+begin_src emacs-lisp
(use-package lsp-mode
  :ensure t
  :defer t
  :commands lsp
  :custom-face
  (lsp-headerline-breadcrumb-path-error-face
   ((t :underline (:style wave :color ,(face-foreground 'error))
       :inherit lsp-headerline-breadcrumb-path-face)))
  (lsp-headerline-breadcrumb-path-warning-face
   ((t :underline (:style wave :color ,(face-foreground 'warning))
       :inherit lsp-headerline-breadcrumb-path-face)))
  (lsp-headerline-breadcrumb-path-info-face
   ((t :underline (:style wave :color ,(face-foreground 'success))
       :inherit lsp-headerline-breadcrumb-path-face)))
  (lsp-headerline-breadcrumb-path-hint-face
   ((t :underline (:style wave :color ,(face-foreground 'success))
       :inherit lsp-headerline-breadcrumb-path-face)))

  (lsp-headerline-breadcrumb-symbols-error-face
   ((t :inherit lsp-headerline-breadcrumb-symbols-face
       :underline (:style wave :color ,(face-foreground 'error)))))
  (lsp-headerline-breadcrumb-symbols-warning-face
   ((t :inherit lsp-headerline-breadcrumb-symbols-face
       :underline (:style wave :color ,(face-foreground 'warning)))))
  (lsp-headerline-breadcrumb-symbols-info-face
   ((t :inherit lsp-headerline-breadcrumb-symbols-face
       :underline (:style wave :color ,(face-foreground 'success)))))
  (lsp-headerline-breadcrumb-symbols-hint-face
   ((t :inherit lsp-headerline-breadcrumb-symbols-face
       :underline (:style wave :color ,(face-foreground 'success)))))
  :custom
  (lsp-auto-guess-root t)
  (lsp-prefer-flymake nil) ; Use flycheck instead of flymake
  (read-process-output-max (* 1024 1024))
  (lsp-eldoc-hook nil)
  ;; (lsp-file-watch-threshold 2000)
  (lsp-enable-file-watchers nil)         ;; performance matters
  (lsp-enable-text-document-color nil)   ;; as above
  (lsp-enable-symbol-highlighting nil)   ;; as above
  (lsp-enable-on-type-formatting nil)    ;; as above
  (lsp-enable-indentation nil)           ;; don't change my code without my permission
  (lsp-keep-workspace-alive nil)         ;; auto kill lsp server
  (lsp-headerline-breadcrumb-enable nil) ;; keep headline clean
  (lsp-modeline-code-actions-enable nil) ;; keep modeline clean
  (lsp-modeline-diagnostics-enable nil)  ;; as above
  :bind (:map lsp-mode-map
              ("C-c f" . lsp-format-region)
              ("C-c d" . lsp-describe-thing-at-point)
              ("C-c e" . lsp-execute-code-action)
              ("C-c r" . lsp-rename)
              )
  :hook ((prog-mode . (lambda ()
                        (unless (derived-mode-p 'emacs-lisp-mode 'lisp-mode)
                          (lsp-deferred))))
         (lsp-mode . (lambda ()
                       ;; Integrate `which-key'
                       (lsp-enable-which-key-integration)))
         ;; (lsp-mode . (lambda ()
         ;;               (setq-local company-backends '(company-lsp company-tabnine))))
         )
  )
#+end_src
*** lsp ui
#+begin_src emacs-lisp
(use-package lsp-ui
  :ensure t
  :after lsp-mode
  :diminish
  :commands lsp-ui-mode
  :custom-face
  (lsp-ui-doc-background ((t (:background nil))))
  (lsp-ui-doc-header ((t (:inherit (font-lock-string-face italic)))))
  :bind
  (:map lsp-ui-mode-map
        ([remap xref-find-definitions] . lsp-ui-peek-find-definitions)
        ([remap xref-find-references] . lsp-ui-peek-find-references)
        ("C-c u" . lsp-ui-imenu)
        ("M-i" . lsp-ui-doc-focus-frame))
  (:map lsp-mode-map
        ("M-n" . forward-paragraph)
        ("M-p" . backward-paragraph))
  :custom
  (lsp-ui-doc-header t)
  (lsp-ui-doc-include-signature t)
  (lsp-ui-doc-border (face-foreground 'default))
  ;; (lsp-ui-doc-position 'at-point)
  (lsp-ui-sideline-enable nil)
  (lsp-ui-sideline-ignore-duplicate t)
  (lsp-ui-sideline-show-code-actions nil)
  :config
  ;; `C-g'to close doc
  (advice-add #'keyboard-quit :before #'lsp-ui-doc-hide)
  ;; Reset `lsp-ui-doc-background' after loading theme
  (add-hook 'after-load-theme-hook
            (lambda ()
              (setq lsp-ui-doc-border (face-foreground 'font-lock-comment-face))
              (set-face-background 'lsp-ui-doc-background (face-background 'tooltip))))
  ;; Use lsp-ui-doc-webkit only in GUI
  (if (display-graphic-p)
      (setq lsp-ui-doc-use-webkit t))
  ;; WORKAROUND Hide mode-line of the lsp-ui-imenu buffer
  ;; https://github.com/emacs-lsp/lsp-ui/issues/243
  (defadvice lsp-ui-imenu (after hide-lsp-ui-imenu-mode-line activate)
    (setq mode-line-format nil)))
#+end_src
*** company-lsp (abondoned, because lsp-mode already support with company-capf)
#+begin_src emacs-lisp
;; (use-package company-lsp
;;   :quelpa ((company-lsp :fetcher github :repo "tigersoldier/company-lsp"))
;;   ;; hook (lsp-mode . (lambda ()
;;   ;;                  (setq-local company-backends 'company-lsp)))
;;   :config
;;   ;; lsp hack due to: https://github.com/tigersoldier/company-lsp/issues/145
;;   (defun lsp--sort-completions (completions)
;;     (lsp-completion--sort-completions completions))
;;   (defun lsp--annotate (item)
;;     (lsp-completion--annotate item))
;;   (defun lsp--resolve-completion (item)
;;     (lsp-completion--resolve item))
;;   (push 'company-lsp company-backends)
;;   )
#+end_src
*** lsp ivy
#+begin_src emacs-lisp
(use-package lsp-ivy
  :ensure t
  :after lsp-mode
  :bind (:map lsp-mode-map
              ([remap xref-find-apropos] . lsp-ivy-workspace-symbol)
              ("C-s-." . lsp-ivy-global-workspace-symbol))
  :config
  (with-no-warnings

    (defvar lsp-ivy-symbol-kind-icons
      `(,(all-the-icons-material "find_in_page" :height 0.9 :v-adjust -0.15) ; Unknown - 0
        ,(all-the-icons-faicon "file-o" :height 0.9 :v-adjust -0.02) ; File - 1
        ,(all-the-icons-material "view_module" :height 0.9 :v-adjust -0.15 :face 'all-the-icons-lblue) ; Module - 2
        ,(all-the-icons-material "view_module" :height 0.95 :v-adjust -0.15 :face 'all-the-icons-lblue) ; Namespace - 3
        ,(all-the-icons-octicon "package" :height 0.9 :v-adjust -0.15) ; Package - 4
        ,(all-the-icons-material "settings_input_component" :height 0.9 :v-adjust -0.15 :face 'all-the-icons-orange) ; Class - 5
        ,(all-the-icons-faicon "cube" :height 0.9 :v-adjust -0.02 :face 'all-the-icons-purple) ; Method - 6
        ,(all-the-icons-faicon "wrench" :height 0.8 :v-adjust -0.02) ; Property - 7
        ,(all-the-icons-octicon "tag" :height 0.95 :v-adjust 0 :face 'all-the-icons-lblue) ; Field - 8
        ,(all-the-icons-faicon "cube" :height 0.9 :v-adjust -0.02 :face 'all-the-icons-lpurple) ; Constructor - 9
        ,(all-the-icons-material "storage" :height 0.9 :v-adjust -0.15 :face 'all-the-icons-orange) ; Enum - 10
        ,(all-the-icons-material "share" :height 0.9 :v-adjust -0.15 :face 'all-the-icons-lblue) ; Interface - 11
        ,(all-the-icons-faicon "cube" :height 0.9 :v-adjust -0.02 :face 'all-the-icons-purple) ; Function - 12
        ,(all-the-icons-octicon "tag" :height 0.95 :v-adjust 0 :face 'all-the-icons-lblue) ; Variable - 13
        ,(all-the-icons-faicon "cube" :height 0.9 :v-adjust -0.02 :face 'all-the-icons-purple) ; Constant - 14
        ,(all-the-icons-faicon "text-width" :height 0.9 :v-adjust -0.02) ; String - 15
        ,(all-the-icons-material "format_list_numbered" :height 0.95 :v-adjust -0.15) ; Number - 16
        ,(all-the-icons-octicon "tag" :height 0.9 :v-adjust 0.0 :face 'all-the-icons-lblue) ; Boolean - 17
        ,(all-the-icons-material "view_array" :height 0.95 :v-adjust -0.15) ; Array - 18
        ,(all-the-icons-octicon "tag" :height 0.9 :v-adjust 0.0 :face 'all-the-icons-blue) ; Object - 19
        ,(all-the-icons-faicon "key" :height 0.9 :v-adjust -0.02) ; Key - 20
        ,(all-the-icons-octicon "tag" :height 0.9 :v-adjust 0.0) ; Null - 21
        ,(all-the-icons-material "format_align_right" :height 0.95 :v-adjust -0.15 :face 'all-the-icons-lblue) ; EnumMember - 22
        ,(all-the-icons-material "settings_input_component" :height 0.9 :v-adjust -0.15 :face 'all-the-icons-orange) ; Struct - 23
        ,(all-the-icons-octicon "zap" :height 0.9 :v-adjust 0 :face 'all-the-icons-orange) ; Event - 24
        ,(all-the-icons-material "control_point" :height 0.9 :v-adjust -0.15) ; Operator - 25
        ,(all-the-icons-faicon "arrows" :height 0.9 :v-adjust -0.02) ; TypeParameter - 26
        ))

    (lsp-defun my-lsp-ivy--format-symbol-match
      ((sym &as &SymbolInformation :kind :location (&Location :uri))
       project-root)
      "Convert the match returned by `lsp-mode` into a candidate string."
      (let* ((sanitized-kind (if (< kind (length lsp-ivy-symbol-kind-icons)) kind 0))
             (type (elt lsp-ivy-symbol-kind-icons sanitized-kind))
             (typestr (if lsp-ivy-show-symbol-kind (format "%s " type) ""))
             (pathstr (if lsp-ivy-show-symbol-filename
                          (propertize (format " · %s" (file-relative-name (lsp--uri-to-path uri) project-root))
                                      'face font-lock-comment-face)
                        "")))
        (concat typestr (lsp-render-symbol-information sym ".") pathstr)))
    (advice-add #'lsp-ivy--format-symbol-match :override #'my-lsp-ivy--format-symbol-match)
    ))
#+end_src
*** enable lsp mode in babel src block (abondoned, lsp mode has an official function lsp-org to support this)
#+begin_src emacs-lisp
;; Enable LSP in org babel (method 1)
;; https://github.com/emacs-lsp/lsp-mode/issues/377
;; (cl-defmacro lsp-org-babel-enable (lang)
;;   "Support LANG in org source code block."
;;   (cl-check-type lang stringp)
;;   (let* ((edit-pre (intern (format "org-babel-edit-prep:%s" lang)))
;;          (intern-pre (intern (format "lsp--%s" (symbol-name edit-pre)))))
;;     `(progn
;;        (defun ,intern-pre (info)
;;          (let ((file-name (->> info caddr (alist-get :file))))
;;            (unless file-name
;;              (user-error "LSP:: specify `:file' property to enable"))
;;            (setq buffer-file-name file-name)
;;            (lsp-deferred)
;;            ))
;;        (put ',intern-pre 'function-documentation
;;             (format "Enable LSP mode in the buffer of org source block (%s)."
;;                     (upcase ,lang)))
;;        (if (fboundp ',edit-pre)
;;            (advice-add ',edit-pre :after ',intern-pre)
;;          (progn
;;            (defun ,edit-pre (info)
;;              (,intern-pre info))
;;            (put ',edit-pre 'function-documentation
;;                 (format "Prepare local buffer environment for org source block (%s)."
;;                         (upcase ,lang))))))))
;; (defvar org-babel-lang-list
;;   '("python" "sh" "sql"))
;; (dolist (lang org-babel-lang-list)
;;   (eval `(lsp-org-babel-enable ,lang)))

;; Enable LSP in org babel (method 2)
;; (defun org-babel-edit-prep:python (babel-info)
;;   (setq-local buffer-file-name (->> babel-info caddr (alist-get :file)))
;;   (setq-local lsp-buffer-uri (->> babel-info caddr (alist-get :file) lsp--path-to-uri))
;;   (lsp-deferred)
;;   )
#+end_src
** Dap mode
1. install dependency
#+begin_src shell :file-name: temp.sh
pip install "ptvsd>=4.2"
#+end_src
2. dap mode configuration
#+begin_src emacs-lisp
(use-package dap-mode
  :ensure t
  :diminish
  :bind
  (:map dap-mode-map
        (("<f12>" . dap-debug)
         ("<f8>" . dap-continue)
         ("<f9>" . dap-next)
         ("<f10>" . dap-step-in)
         ("<f11>" . dap-step-out)
         ("<f7>" . dap-breakpoint-toggle)))
  :config
  (require 'dap-python) ;; to enable dap-python
  (setq dap-auto-configure-features '(sessions locals controls tooltip))
  )
#+end_src
** Python settings
*** Basic python settings
#+begin_src emacs-lisp
(defun my-run-python ()
  (save-selected-window
    (switch-to-buffer-other-window (process-buffer (python-shell-get-or-create-process (python-shell-parse-command))))))

(use-package python
  :ensure nil
  :mode ("\\.py\\'" . python-mode)
  :hook (inferior-python-mode . my/buffer-auto-close)
  :init
  ;; Disable readline based native completion
  (setq python-shell-completion-native-enable nil)
  :config
  (setq python-indent-offset 4
	      python-indent 4
	      indent-tabs-mode nil
	      default-tab-width 4)
  (setq flycheck-python-pycompile-executable "python3")
  (setq python-shell-interpreter "jupyter-console"
        python-shell-interpreter-args "--simple-prompt --kernel=Python3"
        python-shell-prompt-detect-failure-warning nil)
  (add-to-list 'python-shell-completion-native-disabled-interpreters
               "jupyter-console")
  (add-to-list 'python-shell-completion-native-disabled-interpreters
               "jupyter")
  ;; Live Coding in Python
  (use-package live-py-mode :ensure t)
)

(use-package py-autopep8
  :ensure t
  :hook
  (python-mode . py-autopep8-enable-on-save)
  )
#+end_src
*** python lsp settings
**** Option 1: pyls
Use pyls as python language server. First need to install =python-language-server= via pip:
#+begin_src shell
pip install 'python-language-server[all]'
#+end_src
**** Option 2: Microsoft-Python-LanguageServer
1. install mspyls binary.
#+begin_src shell
# 1. install dotnet
brew install dotnet

# 2. Clone and build python-language-server
git clone https://github.com/Microsoft/python-language-server.git
cd python-language-server/src/LanguageServer/Impl
dotnet publish -c Release -r osx-x64   # for mac

# 3. Then make the binary executable
chmod a+x $(git rev-parse --show-toplevel)/output/bin/Release/osx-x64/publish/Microsoft.Python.LanguageServer

# 4. Set executable to lsp-python-ms-executable or add binary directory to PATH
#+end_src

2. Then add =lsp-mode= configuration in Emacs:
#+begin_src emacs-lisp
(use-package lsp-python-ms
  :ensure t
  :demand
  :hook ((python-mode . (lambda ()
                          (require 'lsp-python-ms)
                          (unless (derived-mode-p 'emacs-lisp-mode 'lisp-mode)))))
  :init
  (setq lsp-python-ms-auto-install-server t)
  (setq lsp-python-ms-python-executable "/usr/local/opt/python@3.9/libexec/bin/python")
  (setq lsp-python-ms-executable "~/Documents/sandbox/python-language-server/output/bin/Release/osx-x64/publish/Microsoft.Python.LanguageServer")
  )
#+end_src
**** Option 3: pyright
This Server supports automatic install (need has npm installed as dependency). Install this language server with M-x =lsp-install-server= =RET= =pyright= =RET=.
#+begin_src emacs-lisp
;; (use-package lsp-pyright
;;   :ensure t
;;   ;; :preface
;;   ;; ;; Use yapf to format
;;   ;; (defun lsp-pyright-format-buffer ()
;;   ;;   (interactive)
;;   ;;   (when (and (executable-find "yapf") buffer-file-name)
;;   ;;     (call-process "yapf" nil nil nil "-i" buffer-file-name)))
;;   :hook (python-mode . (lambda ()
;;                          (require 'lsp-pyright)))
;;   :init (when (executable-find "python3")
;;           (setq lsp-pyright-python-executable-cmd "/usr/local/opt/python/bin/python3")))
#+end_src
** EIN settings
For jupyter-notebook.
#+begin_src emacs-lisp
(use-package ein
  :ensure t
  :commands (ein:run)
  :hook ((ein:notebook-multilang-mode
          . (lambda () (ws-butler-mode -1) (visual-line-mode)))
         )
  :config
  (setq ein:jupyter-default-notebook-directory (expand-file-name "~/iCloud/Documents/sandbox/learnPython/"))
  (setq ein:output-area-inlined-images t)
  ;; (set-face-attribute 'ein:input-cell nil :background input-block)
  )
#+end_src
** Jupyter settings
=Emacs Jupyter= is another choice similar as =EIN= while the experience is better inside org-mode.
#+begin_src emacs-lisp
(use-package jupyter
  :ensure t
  ;; :defer 12
  :after org
  ;; :bind
  ;; (:map jupyter-repl-mode-map
  ;;       ("C-M-n" . jupyter-repl-history-next)
  ;;       ("C-M-p" . jupyter-repl-history-previous)
  ;;       ("M-n" . jupyter-repl-forward-cell)
  ;;       ("M-p" . jupyter-repl-backward-cell)
  ;;       ("C-M-i" . completion-at-point)
  ;;       :map jupyter-repl-interaction-mode-map
  ;;       ("M-i" . nil)
  ;;       ("C-?" . jupyter-inspect-at-point)
  ;;       )
  :init
  (add-hook 'org-mode-hook 'org-babel-jupyter-aliases-from-kernelspecs)
  (setq org-babel-default-header-args:jupyter-python '((:async . "yes")
                                                       (:session . "py"))))
#+end_src

#+begin_quote
if network is not good, you should mannually install zmq binary:
1. download emacs-zmq binary from: https://github.com/nnicandro/emacs-zmq/releases
2. untar
3. mv =emacs-zmq.so= to directory(based on your version): ~/.emacs.d/elpa/zmq-20200912.1126/
#+end_quote
** Shell script mode
*** basic settings
#+begin_src emacs-lisp
;; awesoome. sh-mode provides `sh-while-getopts' to automate getopts.
(use-package sh-script
  :ensure nil
  :mode (("\\.sh\\'"     . sh-mode)
         ("/PKGBUILD\\'" . sh-mode))
  :hook (sh-mode . sh-mode-setup)
  :bind (:map sh-mode-map
         ("C-c C-e" . sh-execute-region))
  :config
  (defun sh-mode-setup ()
    (add-hook 'after-save-hook #'executable-make-buffer-file-executable-if-script-p nil t))
  :custom
  (sh-basic-offset 2)
  (sh-indentation 2))
#+end_src
*** bash lsp settings
This Server supports automatic install (need has npm installed as dependency). Install this language server with M-x =lsp-install-server= =RET= =bash-ls= =RET=.

Also can install via npm in terminal as following.
#+begin_src shell
npm i -g bash-language-server
#+end_src
Add lsp to =sh-mode= hook.
#+begin_src emacs-lisp
;; (add-hook 'sh-mode-hook 'lsp)
#+end_src
** Elisp mode
#+begin_src emacs-lisp
(use-package elisp-mode
  :ensure nil
  :bind (:map emacs-lisp-mode-map
         ;; consistent with inferior-python-shell
         ("C-c C-b" . eval-buffer)
         ("C-c C-c" . eval-to-comment)
         :map lisp-interaction-mode-map
         ("C-c C-c" . eval-to-comment))
  :config
  (defconst eval-as-comment-prefix ";;=> ")

  ;; Imitate scala-mode
  ;; from https://github.com/dakra/dmacs
  (defun eval-to-comment (&optional arg)
    (interactive "P")
    (let ((start (point)))
      (eval-print-last-sexp arg)
      (save-excursion
        (goto-char start)
        (save-match-data
          (re-search-forward "[[:space:]\n]+" nil t)
          (insert eval-as-comment-prefix))))))
#+end_src
** SQL mode
*** SQL automatically uppercase:
#+begin_src emacs-lisp
;; automatically uppercase SQL keywords
(use-package sqlup-mode
  :ensure t
  :hook ((sql-mode . sqlup-mode)
         (sql-interactive-mode . sqlup-mode)
         )
  :bind (:map sql-mode-map
              ("C-c u" . sqlup-capitalize-keywords-in-region)
              ("C-c C-c" . lsp-sql-execute-query))
  )
#+end_src
*** SQL LSP support
1. install sqls first
#+begin_src shell
# 1. install sqls binary
go get github.com/lighttiger2505/sqls

# 2. add sqls to PATH
export PATH=~/go/bin/:$PATH
#+end_src
2. config database information
#+begin_src emacs-lisp
(setq lsp-sqls-connections
    '(((driver . "mysql") (dataSourceName . "root:12345678@tcp(localhost:3306)/midea_cs"))))
#+end_src
*** Use ejc-sql as a MySQL client
:PROPERTIES:
:header-args:    :tangle no
:END:

Abandoned because we have org-babel!

1. install dependency package =leiningen=
#+begin_src shell
brew install leiningen
#+end_src
2. ejc-sql settings
#+begin_src emacs-lisp
(use-package ejc-sql
  ;; disable this package because we have lsp!!!
  :disabled t
  :hook ((sql-mode . (lambda ()
                       (require 'ejc-company)
                       (push 'ejc-company-backend company-backends)))
         (ejc-result-mode . display-line-numbers-mode)
         (ejc-sql-minor-mode . (lambda ()
                                 (ejc-eldoc-setup)
                                 ;; (font-lock-warn-todo)
                                 ))
         (ejc-sql-connected . (lambda ()
                                ;; (ejc-set-fetch-size 99)         ; Limit for the number of records to output.
                                ;; (ejc-set-max-rows 99)           ; Limit for the number of records in ResultSet.
                                (ejc-set-show-too-many-rows-message t) ; Set output 'Too many rows' message.
                                ;;(ejc-set-column-width-limit 25) ; Limit for outputing the number of chars per column.
                                (ejc-set-use-unicode t)         ; Use unicode symbols for grid borders.
                                )))
  :init

  :config
  (setq nrepl-sync-request-timeout 60)
  (setq clomacs-httpd-default-port 8090) ; Use a port other than 8080.
  ;; Show results of SQL snippets evaluation in `org-mode'
  ;; in dedicated buffer.
  (setq ejc-org-mode-show-results nil)
  (setq ejc-use-flx t)                          ; Enable `flx' fuzzy matching.
  (setq ejc-result-table-impl 'ejc-result-mode) ; Set major-mode for results.
  ;; store db info in my-ejc-connection file
  (require 'my-ejc-connection nil 'noerror)
  )
#+end_src
** Web mode
*** Web mode basic settings
#+begin_src emacs-lisp
(use-package web-mode
  :ensure t
  :mode "\\.\\(phtml\\|php|[gj]sp\\|as[cp]x\\|erb\\|djhtml\\|html?\\|hbs\\|ejs\\|jade\\|swig\\|tm?pl\\|vue\\)$"
  :config
  (setq web-mode-markup-indent-offset 2)
  (setq web-mode-css-indent-offset 2)
  (setq web-mode-code-indent-offset 2))
#+end_src
*** HTML lsp support
This Server supports automatic install (need has npm installed as dependency). Install this language server with M-x =lsp-install-server= =RET= =html-ls= =RET=.

Also can install via npm in terminal as following.
#+begin_src shell
npm i -g vscode-html-languageserver-bin
#+end_src
** JaveScript settings
#+begin_src emacs-lisp
(use-package js2-mode
  :ensure t
  :mode "\\.js\\'"
  :interpreter "node")
#+end_src
** Json mode
#+begin_src emacs-lisp
(use-package json-mode
  :ensure t
  :mode "\\.json\\'")
#+end_src
** Treemacs
:PROPERTIES:
:header-args:    :tangle no
:END:

*** treemacs basic settings
#+begin_src emacs-lisp
(use-package treemacs
  :ensure t
  :init
  (with-eval-after-load 'winum
    (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
  :custom
  (treemacs-collapse-dirs 3)
  (treemacs-deferred-git-apply-delay 0.5)
  (treemacs-display-in-side-window t)
  (treemacs-file-event-delay 5000)
  (treemacs-file-follow-delay 0.2)
  (treemacs-follow-after-init t)
  (treemacs-follow-recenter-distance 0.1)
  (treemacs-git-command-pipe "")
  (treemacs-goto-tag-strategy 'refetch-index)
  (treemacs-indentation 2)
  (treemacs-indentation-string " ")
  (treemacs-is-never-other-window nil)
  (treemacs-max-git-entries 5000)
  (treemacs-no-png-images nil)
  (treemacs-no-delete-other-windows t)
  (treemacs-project-follow-cleanup nil)
  (treemacs-persist-file (expand-file-name ".cache/treemacs-persist" user-emacs-directory))
  (treemacs-recenter-after-file-follow nil)
  (treemacs-recenter-after-tag-follow nil)
  (treemacs-show-cursor nil)
  (treemacs-show-hidden-files t)
  (treemacs-silent-filewatch nil)
  (treemacs-silent-refresh nil)
  (treemacs-sorting 'alphabetic-desc)
  (treemacs-space-between-root-nodes t)
  (treemacs-tag-follow-cleanup t)
  (treemacs-tag-follow-delay 1.5)
  (treemacs-width 35)
  :config
  ;; The default width and height of the icons is 22 pixels. If you are
  ;; using a Hi-DPI display, uncomment this to double the icon size.
  ;;(treemacs-resize-icons 44)
  (treemacs-follow-mode t)
  (treemacs-filewatch-mode t)
  (treemacs-fringe-indicator-mode t)
  :bind
  (("M-0"       . treemacs-select-window)
   ("C-x t 1"   . treemacs-delete-other-windows)
   ("C-x t t"   . treemacs)
   ("C-x t B"   . treemacs-bookmark)
   ("C-x t C-t" . treemacs-find-file)
   ("C-x t M-t" . treemacs-find-tag))
  (:map treemacs-mode-map ("C-p" . treemacs-previous-line)))
#+end_src
*** treemacs magit
#+begin_src emacs-lisp
(use-package treemacs-magit
  :defer t
  :after (treemacs magit)
  :ensure t)
#+end_src
*** treemacs projectile
#+begin_src emacs-lisp
(use-package treemacs-projectile
  :defer t
  :after (treemacs projectile)
  :ensure t)
#+end_src
*** treemacs icon dired
#+begin_src emacs-lisp
(use-package treemacs-icons-dired
  :after (treemacs dired)
  :ensure t
  :config (treemacs-icons-dired-mode))
#+end_src
** write document inside code comment
#+begin_src emacs-lisp
(use-package separedit
  :ensure t
  :bind (:map prog-mode-map
         ("C-c '" . separedit))
  :custom
  (separedit-default-mode 'org-mode) ;; also support markdown mode
  (separedit-remove-trailing-spaces-in-comment t)
  (separedit-continue-fill-column t)
  (separedit-buffer-creation-hook #'auto-fill-mode))
#+end_src
** Ediff settings
#+begin_src emacs-lisp -n
(setq ediff-diff-options "-w"
      ediff-split-window-function 'split-window-horizontally
      ediff-window-setup-function 'ediff-setup-windows-plain)
#+end_src
* EAF settings
EAF: Emacs Application Framework.
** download EAF
1. Via =quelpa=:
   #+begin_src emacs-lisp
;; (quelpa '(eaf :fetcher github
;;               :repo  "manateelazycat/emacs-application-framework"
;;               :files ("*")))
   #+end_src
2. Via git
   #+begin_src shell -n :file-name: temp.sh
git clone --depth=1 -b master https://github.com/manateelazycat/emacs-application-framework.git ~/.emacs.d/lisp/eaf/
   #+end_src

** download dependencies
For non-Mac system, we can use =M-x eaf-install-dependencies= to install depandencies.

If in MacOS, you should install dependencies by hand:
#+begin_src shell
# 1. pip packages dependencies install
pip install epc PyQt5 PyQt5-sip PyQtWebEngine wmctrl pygetwindow mac-app-frontmost PyMuPDF qrcode qtconsole retrying

# 2. brew packages dependencies install
brew install xdotool
brew install mupdf-tools

# 3. npm packages dependencies install
npm install darkreader

# 4. node modules install
cd ~/.emacs.d/elpa/eaf-20210324.653
npm install
#+end_src
** EAF settings
#+begin_src emacs-lisp
(use-package eaf
  ;; :ensure t
  ;; :quelpa (eaf :fetcher github :repo "manateelazycat/emacs-application-framework")
  :load-path "~/.emacs.d/quelpa/build/eaf"
  :init
  (use-package epc :defer t :ensure t)
  (use-package ctable :defer t :ensure t)
  (use-package deferred :defer t :ensure t)
  (use-package s :defer t :ensure t)
  :custom
  (eaf-browser-continue-where-left-off t)
  :config
  ;; browser settings
  (eaf-setq eaf-browser-enable-adblocker "true")
  (eaf-setq eaf-browser-dark-mode "false")
  (setq eaf-browser-default-search-engine "google")
  (eaf-setq eaf-browse-blank-page-url "https://wowhxj.github.io/exported/index.html")
  (eaf-setq eaf-browser-default-zoom "1.1") ;; default is 1
  (eaf-setq eaf-browser-enable-autofill "true")
  ;; make eaf the default browser
  (setq browse-url-browser-function 'eaf-open-browser)
  (defalias 'browse-web #'eaf-open-browser)
  ;; key settings
  (eaf-bind-key scroll_up "C-n" eaf-pdf-viewer-keybinding)
  (eaf-bind-key scroll_down "C-p" eaf-pdf-viewer-keybinding)
  (eaf-bind-key take_photo "p" eaf-camera-keybinding)
  (eaf-bind-key nil "M-q" eaf-browser-keybinding)) ;; unbind, see more in the Wiki

#+end_src
** EAF tips
1. select text in EAF browser
| key | description                        |
|-----+------------------------------------|
| c   | activate text selection            |
| j   | move to the next line              |
| k   | move to the previous line          |
| h   | move to the previous char          |
| l   | move to the next char              |
| b   | move to the previous word          |
| w   | move to the next word              |
| g   | move to the last line              |
| o   | exchange the beginning and the end |
| q   | quit                               |

* Gnus settings
:PROPERTIES:
:header-args:    :tangle no
:END:

** Gnus settings
#+begin_src emacs-lisp -n
(use-package gnus
  :ensure nil
  :custom
  (gnus-use-cache t)
  (gnus-use-scoring nil)
  (gnus-keep-backlog 10)
  (gnus-suppress-duplicates t)
  (gnus-novice-user nil)
  (gnus-expert-user t)
  (gnus-interactive-exit 'quiet)
  (gnus-dbus-close-on-sleep t)
  (gnus-use-cross-reference nil)
  (gnus-inhibit-startup-message nil)
  (gnus-home-directory (no-littering-expand-var-file-name "gnus/"))
  ;; (gnus-select-method '(nnimap "imap.126.com"
  ;;                              (nnimap-address "imap.126.com")
  ;;                              (nnimap-server-port 993)
  ;;                              (nnimap-stream ssl)
  ;;                              (nnimap-authenticator login)
  ;;                              (nnimap-expunge 'on-exit)
  ;;                              (nnimap-streaming t)
  ;;                              (nnimap-fetch-partial-articles "text/")
  ;;                              (nnimap-record-commands t)
  ;;                              ;; (nnmail-expiry-target "nnimap+126:126/Trash")
  ;;                              (nnir-search-engine imap)
  ;;                              Client-Side settings
  ;;                              (nnimap-inbox "INBOX")
  ;;                              ))
  :config
  (setq gnus-select-method '(nnnil nil))
  (setq gnus-secondary-select-methods
        '(
          ;; (nnimap "Personal"
          ;;         (nnimap-address "imap.126.com")
          ;;         (nnimap-server-port "imaps")
          ;;         (nnimap-stream ssl)
          ;;         (nnir-search-engine imap)
          ;;         (nnmail-expiry-target "nnimap+Personal:&XfJSIJZk-")
          ;;         (nnmail-expiry-wait 'immediate))
          (nnimap "Work"
                  (nnimap-address "imap.midea.com")
                  (nnimap-server-port "imaps")
                  (nnimap-stream ssl)
                  (nnir-search-engine imap)
                  (nnmail-expiry-target "nnimap+Work:[Midea]/Trash")
                  (nnmail-expiry-wait 'immediate))))
  (setq gnus-thread-sort-functions
        '(gnus-thread-sort-by-most-recent-date
          (not gnus-thread-sort-by-number)))
  ;; (gnus-secondary-select-methods '((nntp "gmane" (nntp-address "news.gmane.io"))
  ;;                                  (nntp "nntp.lore.kernel.org")))
  )
#+end_src

** Group mode commands for Gnus
#+begin_src emacs-lisp -n
(use-package gnus-group
  :ensure nil
  :defines gnus-tmp-group
  :after gnus
  :hook ((gnus-group-mode . gnus-topic-mode)
         (gnus-select-group . gnus-group-set-timestamp))
  :config
  (defun gnus-user-format-function-d (_)
    (let ((time (gnus-group-timestamp gnus-tmp-group)))
      (if time
          (format-time-string "%F %H:%M" time)
        "")))
  :custom-face
  (gnus-group-mail-1         ((t (:foreground "DeepPink1" :bold t))))
  (gnus-group-mail-1-empty   ((t (:foreground "DeepPink4" :italic t))))
  (gnus-group-mail-2         ((t (:foreground "HotPink1" :bold t))))
  (gnus-group-mail-2-empty   ((t (:foreground "HotPink4" :italic t))))
  (gnus-group-mail-3         ((t (:foreground "magenta1" :bold t))))
  (gnus-group-mail-3-empty   ((t (:foreground "magenta4" :italic t))))
  (gnus-group-mail-low       ((t (:foreground "SteelBlue1" :bold t))))
  (gnus-group-mail-low-empty ((t (:foreground "SteelBlue4" :italic t))))
  (gnus-group-news-1         ((t (:foreground "DarkSeaGreen1" :bold t))))
  (gnus-group-news-1-empty   ((t (:foreground "DarkSeaGreen4" :italic t))))
  (gnus-group-news-2         ((t (:foreground "CadetBlue1" :bold t))))
  (gnus-group-news-2-empty   ((t (:foreground "CadetBlue4" :italic t))))
  (gnus-group-news-3         ((t (:foreground "RoyalBlue1" :bold t))))
  (gnus-group-news-3-empty   ((t (:foreground "RoyalBlue4" :italic t))))
  (gnus-group-news-low       ((t (:foreground "SkyBlue1" :bold t))))
  (gnus-group-news-low-empty ((t (:foreground "SkyBlue4" :italic t))))
  :custom
  ;;          indentation ------------.
  ;;  #      process mark ----------. |
  ;;                level --------. | |
  ;;           subscribed ------. | | |
  ;;  %          new mail ----. | | | |
  ;;  *   marked articles --. | | | | |
  ;;                        | | | | | |  Ticked    New     Unread  open-status Group
  (gnus-group-line-format "%M%m%S%L%p%P %1(%7i%) %3(%7U%) %3(%7y%) %4(%B%-45G%) %ud\n")
  (gnus-group-sort-function '(gnus-group-sort-by-level gnus-group-sort-by-alphabet))
  (gnus-group-highlight '(;; Mail
                          ((and mailp (eq level 1) (= unread 0)) . gnus-group-mail-1-empty)
                          ((and mailp (eq level 1))              . gnus-group-mail-1)
                          ((and mailp (eq level 2) (= unread 0)) . gnus-group-mail-2-empty)
                          ((and mailp (eq level 2))              . gnus-group-mail-2)
                          ((and mailp (eq level 3) (= unread 0)) . gnus-group-mail-3-empty)
                          ((and mailp (eq level 3))              . gnus-group-mail-3)
                          ((and mailp              (= unread 0)) . gnus-group-mail-low-empty)
                          ((and mailp)                           . gnus-group-mail-low)
                          ;; News
                          ((and (eq level 1) (= unread 0)) . gnus-group-news-1-empty)
                          ((and (eq level 1))              . gnus-group-news-1)
                          ((and (eq level 2) (= unread 0)) . gnus-group-news-2-empty)
                          ((and (eq level 2))              . gnus-group-news-2)
                          ((and (eq level 3) (= unread 0)) . gnus-group-news-3-empty)
                          ((and (eq level 3))              . gnus-group-news-3)
                          ((and              (= unread 0)) . gnus-group-news-low-empty)
                          (t                               . gnus-group-news-low))))
#+end_src

** A folding minor mode for Gnus group buffers
#+begin_src emacs-lisp -n
(use-package gnus-topic
  :ensure nil
  :after gnus
  :custom
  (gnus-topic-indent-level 2)
  (gnus-topic-display-empty-topics t))

#+end_src

** Summary mode commands for gnus
#+begin_src emacs-lisp -n
(use-package gnus-sum
  :ensure nil
  :after gnus
  :custom
  ;; Pretty marks
  (gnus-sum-thread-tree-root            "┌ ")
  (gnus-sum-thread-tree-false-root      "◌ ")
  (gnus-sum-thread-tree-single-indent   "◎ ")
  (gnus-sum-thread-tree-vertical        "│")
  (gnus-sum-thread-tree-indent          "  ")
  (gnus-sum-thread-tree-leaf-with-other "├─►")
  (gnus-sum-thread-tree-single-leaf     "╰─►")
  (gnus-summary-line-format "%U%R %3d %[%-23,23f%] %B %s\n")
  ;; Loose threads
  (gnus-summary-make-false-root 'adopt)
  (gnus-simplify-subject-functions '(gnus-simplify-subject-re gnus-simplify-whitespace))
  (gnus-summary-thread-gathering-function 'gnus-gather-threads-by-subject)
  ;; Filling in threads
  ;; 2 old articles are enough for context
  (gnus-fetch-old-headers 2)
  (gnus-fetch-old-ephemeral-headers 2)
  (gnus-build-sparse-threads 'some)
  ;; More threading
  (gnus-show-threads t)
  (gnus-thread-indent-level 2)
  (gnus-thread-hide-subtree nil)
  (gnus-sort-gathered-threads-function 'gnus-thread-sort-by-date)
  ;; Sorting
  (gnus-thread-sort-functions '(gnus-thread-sort-by-most-recent-date))
  (gnus-subthread-sort-functions '(gnus-thread-sort-by-date))
  ;; Viewing
  (gnus-view-pseudos 'automatic)
  (gnus-view-pseudos-separately t)
  (gnus-view-pseudo-asynchronously t)
  ;; No auto select
  (gnus-auto-select-first nil)
  (gnus-auto-select-next nil)
  (gnus-paging-select-next nil)
  ;; Misc
  (gnus-summary-ignore-duplicates t)
  (gnus-summary-display-while-building t))
#+end_src

** Article mode for Gnus
#+begin_src emacs-lisp -n
(use-package gnus-art
  :ensure nil
  :after gnus
  :custom
  ;; No way to slow down my Gnus
  (gnus-treat-from-picon nil)
  (gnus-treat-mail-picon nil)
  (gnus-treat-newsgroups-picon nil)
  (gnus-treat-from-gravatar nil)
  (gnus-treat-mail-gravatar nil)
  (gnus-treat-body-boundary nil)
  (gnus-treat-display-x-face nil)
  (gnus-treat-display-face nil)
  (gnus-visible-headers (rx line-start (or "From"
                                           "Subject"
                                           "Mail-Followup-To"
                                           "Date"
                                           "To"
                                           "Cc"
                                           "Newsgroups"
                                           "User-Agent"
                                           "X-Mailer"
                                           "X-Newsreader")
                            ":"))
  ;; Block images
  (gnus-inhibit-images t)
  (gnus-article-sort-functions '((not gnus-article-sort-by-number)
                                 (not gnus-article-sort-by-date)))
  (gnus-article-show-cursor t)
  (gnus-article-browse-delete-temp t))
#+end_src

** Asynchronous support for Gnus
#+begin_src emacs-lisp -n
(use-package gnus-async
  :ensure nil
  :after gnus
  :custom
  (gnus-asynchronous t)
  (gnus-use-header-prefetch t))
#+end_src

** Startup functions for Gnus
#+begin_src emacs-lisp -n
(use-package gnus-start
  :ensure nil
  :after gnus
  :custom
  ;; No, thanks
  (gnus-check-new-newsgroups nil)
  (gnus-save-killed-list nil)
  ;; Record Gnus data (reading articles, killing/subscribing groups)
  (gnus-use-dribble-file t)
  (gnus-always-read-dribble-file t)
  (gnus-save-newsrc-file nil)
  (gnus-read-newsrc-file nil)
  (gnus-subscribe-newsgroup-method 'gnus-subscribe-interactively))
#+end_src

** Mail and post interface for Gnus
#+begin_src emacs-lisp -n
(use-package gnus-msg
  :ensure nil
  :after gnus
  :custom
  (gnus-gcc-mark-as-read t))
#+end_src

** Cache interface for Gnus
#+begin_src emacs-lisp -n
(use-package gnus-cache
  :ensure nil
  :after gnus
  :custom
  (gnus-cache-enter-articles '(ticked dormant unread))
  (gnus-cache-remove-articles '(read))
  (gnus-cacheable-groups "^\\(nntp\\|nnimap\\)"))
#+end_src

** Send notifications on new messages in Gnus
#+begin_src emacs-lisp -n
(use-package gnus-notifications
  :ensure nil
  :after gnus
  :custom
  (gnus-notifications-minimum-level 1)
  (gnus-notifications-use-gravatar nil)
  (gnus-notifications-use-google-contacts nil))
#+end_src

** Bookmarks in Gnus
#+begin_src emacs-lisp -n
(use-package gnus-bookmark
  :ensure nil
  :after gnus
  :custom
  (gnus-bookmark-bookmark-inline-details '(subject author)))
#+end_src

** Search in Gnus
#+begin_src emacs-lisp -n
(use-package gnus-search
  :ensure nil
  :when (>= emacs-major-version 28)
  :after gnus
  :custom
  (gnus-search-use-parsed-queries t))
#+end_src

** Extract (uu)encoded files in Gnus
#+begin_src emacs-lisp -n
(use-package gnus-uu
  :ensure nil
  :after gnus
  :custom
  (gnus-uu-kill-carriage-return t)
  (gnus-uu-ignore-files-by-type "audio/\\|video/mpeg"))
#+end_src

** Mail support functions for the Gnus mail backends
#+begin_src emacs-lisp -n
(use-package nnmail
  :ensure nil
  :after gnus
  :custom
  (nnmail-expiry-wait 30)
  (nnmail-split-methods 'nnmail-split-fancy)
  (nnmail-treat-duplicates 'delete))
#+end_src

** Email settings in Gnus
#+begin_src emacs-lisp -n
(use-package message
  :ensure nil
  :hook (message-mode . auto-fill-mode)
  :custom
  (user-full-name "Randolph Huang")
  (user-mail-address "xiaojianghuang@126.com")
  (message-kill-buffer-on-exit t)
  (message-mail-alias-type 'ecomplete)
  (message-send-mail-function #'message-use-send-mail-function)
  (message-signature user-full-name))

(use-package sendmail
  :ensure nil
  :custom
  (send-mail-function #'smtpmail-send-it))

(use-package smtpmail
  :ensure nil
  :custom
  (smtpmail-smtp-server "smtp.126.com")
  (smtpmail-smtp-user user-mail-address)
  (smtpmail-smtp-service 465)
  (smtpmail-debug-info t)
  (smtpmail-debug-verb t)
  (smptmail-stream-type 'ssl))
#+end_src
* MU4E settings
** Dependencies
Install =isync= and =mu=:
#+begin_src shell -n :file-name: temp.sh
brew install isync mu
#+end_src
** Config mbsync
Edit =~/.emacs.d/mu4e/.mbsyncrc= file. Following is an example:

#+begin_example
# mbsyncrc based on
# http://www.ict4g.net/adolfo/notes/2014/12/27/EmacsIMAP.html
# ACCOUNT INFORMATION
IMAPAccount gmail
# Address to connect to
Host imap.gmail.com
User <EMAIL_HERE>
PassCmd "gpg2 -q --for-your-eyes-only --no-tty -d ~/.emacs.d/mu4e/.mbsyncpass-<EMAIL_HERE>.gpg"
AuthMechs LOGIN
SSLType IMAPS
SSLVersions TLSv1.3
CertificateFile /etc/ssl/certs/ca-certificates.crt

# THEN WE SPECIFY THE LOCAL AND REMOTE STORAGE
# - THE REMOTE STORAGE IS WHERE WE GET THE MAIL FROM (E.G., THE
#   SPECIFICATION OF AN IMAP ACCOUNT)
# - THE LOCAL STORAGE IS WHERE WE STORE THE EMAIL ON OUR COMPUTER

# REMOTE STORAGE (USE THE IMAP ACCOUNT SPECIFIED ABOVE)
IMAPStore gmail-remote
Account gmail

# LOCAL STORAGE (CREATE DIRECTORIES with mkdir -p ~/Maildir/gmail)
MaildirStore gmail-local
Path ~/Maildir/gmail/
Inbox ~/Maildir/gmail/INBOX
# REQUIRED ONLY IF YOU WANT TO DOWNLOAD ALL SUBFOLDERS; SYNCING SLOWS DOWN
# SubFolders Verbatim

# CONNECTIONS SPECIFY LINKS BETWEEN REMOTE AND LOCAL FOLDERS
#
# CONNECTIONS ARE SPECIFIED USING PATTERNS, WHICH MATCH REMOTE MAIl
# FOLDERS. SOME COMMONLY USED PATTERS INCLUDE:
#
# 1 "*" TO MATCH EVERYTHING
# 2 "!DIR" TO EXCLUDE "DIR"
# 3 "DIR" TO MATCH DIR

Channel gmail-inbox
Far :gmail-remote:
Near :gmail-local:
Patterns "INBOX"
Create Both
Expunge Both
SyncState *

Channel gmail-sent
Far :gmail-remote:"[Gmail]/Sent Mail"
Near :gmail-local:"Sent Mail"
Create Both
Expunge Both
SyncState *

Channel gmail-all
Far :gmail-remote:"[Gmail]/All Mail"
Near :gmail-local:"All Mail"
Create Both
Expunge Both
SyncState *

Channel gmail-starred
Far :gmail-remote:"[Gmail]/Starred"
Near :gmail-local:"Starred"
Create Both
Expunge Both
SyncState *

Channel gmail-trash
Far :gmail-remote:"[Gmail]/Trash"
Near :gmail-local:"Trash"
Create Both
Expunge Both
SyncState *

# GROUPS PUT TOGETHER CHANNELS, SO THAT WE CAN INVOKE
# MBSYNC ON A GROUP TO SYNC ALL CHANNELS
#
# FOR INSTANCE: "mbsync gmail" GETS MAIL FROM
# "gmail-inbox", "gmail-sent", and "gmail-trash"
#
Group gmail
Channel gmail-inbox
Channel gmail-sent
Channel gmail-trash
Channel gmail-all
Channel gmail-starred
#+end_example

#+begin_quote
If in MacOS:
1. change =gpg2= to =gpg= if you brew install =gpg=
2. run =gpg -c ./.mbsyncpass-<EMAIL_HERE>= to encrypt your password
3. change the certificate file location to: =/etc/ssl/cert.pem= or =/usr/local/etc/openssl@1.1/cert.pem=
4. set SSLVersions bases on following command result:
   =openssl s_client -connect imap.gmail.com:993 -showcerts | grep Protocol=
#+end_quote
** Run mbsync
#+begin_src shell -n :file-name: temp.sh
mbsync -c ~/.emacs.d/mu4e/.mbsyncrc -Dmn gmail
mbsync -c ~/.emacs.d/mu4e/.mbsyncrc -a
mu init --maildir=~/Maildir/ --my-address=YOUR_EMAIL1 --my-address=YOUR_EMAIL2
mu index
#+end_src
** Config mu4e
#+begin_src emacs-lisp -n
(use-package mu4e
  :ensure nil
  :load-path "/usr/local/share/emacs/site-lisp/mu/mu4e"
  :commands (mu4e make-mu4e-context)
  :init
  (use-package mu4e-alert
    :ensure t
    :defer t
    :config
    (setq mu4e-mu-binary "/usr/local/bin/mu")
    (when (executable-find "notify-send")
      (mu4e-alert-set-default-style 'libnotify))
    :hook
    ((after-init . mu4e-alert-enable-notifications)
     (after-init . mu4e-alert-enable-mode-line-display)))
  (use-package mu4e-overview :ensure t :defer t)
  :bind
  (("\e\e m" . mu4e)
   (:map mu4e-view-mode-map
         ("e" . mu4e-view-save-attachment)))
  :custom
  (mu4e-mu-binary "/usr/local/bin/mu")
  (mu4e-maildir (expand-file-name "~/Mail"))
  (mu4e-get-mail-command "mbsync -c ~/.emacs.d/mu4e/.mbsyncrc -a")
  (mu4e-view-prefer-html t)
  (mu4e-update-interval 180)
  (mu4e-headers-auto-update t)
  (mu4e-compose-format-flowed t)
  (mu4e-view-show-images t)
  (mu4e-change-filenames-when-moving t) ; work better for mbsync
  (mu4e-attachment-dir "~/Downloads")
  (message-kill-buffer-on-exit t)
  (mu4e-compose-dont-reply-to-self t)
  (mu4e-view-show-addresses t)
  (mu4e-confirm-quit nil)
  (mu4e-use-fancy-chars t)
  (mu4e-view-use-gnus t)
  (gnus-icalendar-org-capture-file "meetings.org") ; Prerequisite: set it to meetings org fie
  (gnus-icalendar-org-capture-headline '("Meetings")) ; Make sure to create Calendar heading first
  :hook
  ((mu4e-view-mode . visual-line-mode)
   (mu4e-compose-mode . (lambda ()
                          (visual-line-mode)
                          (use-hard-newlines -1)
                          (flyspell-mode)))
   (mu4e-view-mode . (lambda() ;; try to emulate some of the eww key-bindings
                       (local-set-key (kbd "<tab>") 'shr-next-link)
                       (local-set-key (kbd "<backtab>") 'shr-previous-link)))
   (mu4e-headers-mode . (lambda ()
                          (interactive)
                          (setq mu4e-headers-fields
                                `((:human-date . 25) ;; alternatively, use :date
                                  (:flags . 6)
                                  (:from . 22)
                                  (:thread-subject . ,(- (window-body-width) 70)) ;; alternatively, use :subject
                                  (:size . 7))))))
  :config
  (require 'mu4e-icalendar) ; TODO
  (mu4e-icalendar-setup)
  (gnus-icalendar-org-setup)
  (defalias 'mu4e-add-attachment 'mail-add-attachment
    "I prefer the add-attachment function to begin wih mu4e so I can find it easily.")
  (setq mail-user-agent (mu4e-user-agent))
  (add-to-list 'mu4e-view-actions
               '("ViewInBrowser" . mu4e-action-view-in-browser) t)
  (setq mu4e-contexts
        (list
         (make-mu4e-context
          :name "midea"
          :enter-func (lambda () (mu4e-message "Entering context midea"))
          :leave-func (lambda () (mu4e-message "Leaving context midea"))
          :match-func
          (lambda (msg)
            (when msg
              (string-match "midea" (mu4e-message-field msg :maildir))))
          :vars '((mu4e-sent-folder . "/midea/Sent Mail")
                  (mu4e-drafts-folder . "/midea/Drafts")
                  (mu4e-trash-folder . "/midea/Trash")
                  (mu4e-sent-messages-behavior . sent)
                  ;; (mu4e-compose-signature . user-full-name)
                  (mu4e-compose-signature . "Best Regards,\n黄孝江 产品经理\n美的集团智能化创新中心")
                  (user-mail-address . "huangxj73@midea.com") ; Prerequisite: Set this to your email
                  (mu4e-compose-format-flowed . t)
                  (smtpmail-queue-dir . "~/Mail/midea/queue/cur")
                  (message-send-mail-function . smtpmail-send-it)
                  (smtpmail-smtp-user . "huangxj73@midea.com") ; Set to your username
                  ;; (smtpmail-starttls-credentials . (("smtp.midea.com" 587 nil nil)))
                  ;; (smtpmail-auth-credentials . (expand-file-name "~/.authinfo.gpg"))
                  ;; (smtpmail-default-smtp-server . "smtp.midea.com")
                  (smtpmail-smtp-server . "smtp.midea.com")
                  (smtpmail-smtp-service . 465)
                  (smtpmail-stream-type . ssl)
                  (smtpmail-debug-info . t)
                  (smtpmail-debug-verbose . t)
                  (mu4e-maildir-shortcuts . ( ("/midea/INBOX"            . ?i)
                                              ("/midea/Sent Mail" . ?s)
                                              ("/midea/Trash"       . ?t)
                                              ;; ("/midea/All Mail"  . ?a)
                                              ;; ("/midea/Starred"   . ?r)
                                              ;; ("/midea/Drafts"    . ?d)
                                              ))))
         (make-mu4e-context
          :name "126"
          :enter-func (lambda () (mu4e-message "Entering context 126"))
          :leave-func (lambda () (mu4e-message "Leaving context 126"))
          :match-func
          (lambda (msg)
            (when msg
              (string-match "126" (mu4e-message-field msg :maildir))))
          :vars '((mu4e-sent-folder . "/126/Sent Mail")
                  (mu4e-drafts-folder . "/126/Drafts")
                  (mu4e-trash-folder . "/126/Trash")
                  (mu4e-sent-messages-behavior . sent)
                  ;; (mu4e-compose-signature . user-full-name)
                  (mu4e-compose-signature . "Best Regards,\nRandolph Huang")
                  (user-mail-address . "xiaojianghuang@126.com") ; Prerequisite: Set this to your email
                  (mu4e-compose-format-flowed . t)
                  (smtpmail-queue-dir . "~/Mail/126/queue/cur")
                  (message-send-mail-function . smtpmail-send-it)
                  (smtpmail-smtp-user . "xiaojianghuang@126.com") ; Set to your username
                  ;; (smtpmail-starttls-credentials . (("smtp.126.com" 587 nil nil)))
                  ;; (smtpmail-auth-credentials . (expand-file-name "~/.authinfo.gpg"))
                  (smtpmail-default-smtp-server . "smtp.126.com")
                  (smtpmail-smtp-server . "smtp.126.com")
                  (smtpmail-smtp-service . 465)
                  (smtpmail-stream-type . ssl)
                  (smtpmail-debug-info . t)
                  (smtpmail-debug-verbose . t)
                  (mu4e-maildir-shortcuts . ( ("/126/INBOX"            . ?i)
                                              ("/126/Sent Mail" . ?s)
                                              ("/126/Trash"       . ?t)
                                              ;; ("/midea/All Mail"  . ?a)
                                              ;; ("/midea/Starred"   . ?r)
                                              ;; ("/midea/Drafts"    . ?d)
                                              ))))
         (make-mu4e-context
          :name "yahoo"
          :enter-func (lambda () (mu4e-message "Entering context yahoo"))
          :leave-func (lambda () (mu4e-message "Leaving context yahoo"))
          :match-func
          (lambda (msg)
            (when msg
              (string-match "126" (mu4e-message-field msg :maildir))))
          :vars '((mu4e-sent-folder . "/yahoo/Sent Mail")
                  (mu4e-drafts-folder . "/yahoo/Drafts")
                  (mu4e-trash-folder . "/yahoo/Trash")
                  (mu4e-sent-messages-behavior . sent)
                  (mu4e-compose-signature . "Best Regards,\nRandolph Huang")
                  (user-mail-address . "xiaojianghuang@yahoo.com") ; Prerequisite: Set this to your email
                  (mu4e-compose-format-flowed . t)
                  (smtpmail-queue-dir . "~/Mail/yahoo/queue/cur")
                  (message-send-mail-function . smtpmail-send-it)
                  (smtpmail-smtp-user . "xiaojianghuang@yahoo.com") ; Set to your username
                  (smtpmail-smtp-server . "smtp.mail.yahoo.com")
                  (smtpmail-smtp-service . 465)
                  (smtpmail-stream-type . ssl)
                  (smtpmail-debug-info . t)
                  (smtpmail-debug-verbose . t)
                  (mu4e-maildir-shortcuts . ( ("/yahoo/INBOX"            . ?i)
                                              ("/yahoo/Sent Mail" . ?s)
                                              ("/yahoo/Trash"       . ?t)
                                              ))))
         ))

  (require 'mu4e-org)
  (add-to-list 'org-capture-templates '("e" "Email Workflow"))
  (add-to-list 'org-capture-templates
               '("ef" "Follow Up" entry
                 (file+olp "mail.org" "Follow Up")
                 "* TODO Follow up email from: %:fromname subject: %:subject\nSCHEDULED:%t\nDEADLINE: %(org-insert-time-stamp (org-read-date nil t \"+2d\"))\n\n%a\n\n%i"
                 ;; if you want to capture without prompt, add ":immediate-finish t" at the end of the template.
                 :immediate-finish t
                 ))
  (add-to-list 'org-capture-templates
               '("er" "Read Later" entry
                 (file+olp "mail.org" "Read Later")
                 "* TODO Read with email from: %:fromname subject: %:subject\nSCHEDULED:%t\nDEADLINE: %(org-insert-time-stamp (org-read-date nil t \"+2d\"))\n\n%a\n\n%i"
                 :immediate-finish t
                 ))

  (defun my/capture-mail-follow-up (msg)
    (interactive)
    (call-interactively 'org-store-link)
    (org-capture nil "ef"))

  (defun my/capture-mail-read-later (msg)
    (interactive)
    (call-interactively 'org-store-link)
    (org-capture nil "er"))

  ;; Add custom actions for our capture templates
  (add-to-list 'mu4e-headers-actions
               '("follow up" . my/capture-mail-follow-up) t)
  (add-to-list 'mu4e-view-actions
               '("follow up" . my/capture-mail-follow-up) t)
  (add-to-list 'mu4e-headers-actions
               '("read later" . my/capture-mail-read-later) t)
  (add-to-list 'mu4e-view-actions
               '("read later" . my/capture-mail-read-later) t)

  (defun my/store-link-to-mu4e-query ()
    "Store the mu4e query as a link so you can add this link via C-c C-l"
    (interactive)
    (let ((org-mu4e-link-query-in-headers-mode t))
      (call-interactively 'org-store-link)))

  ;; Start mu4e in the background so that it syncs mail periodically
  (setq mu4e-context-policy 'pick-first)
  (mu4e t)
)
#+end_src
** Use org mode to compose email in mu4e
There are two packages support orgmode when sending emails with mu4e:
+ org-msg
+ org-mime

Here we use =org-msg=:
#+begin_src emacs-lisp -n
(use-package org-msg
  :ensure t
  :hook (message-mode . org-msg-mode)
  :custom
  (org-msg-options "html-postamble:nil H:5 num:nil ^:{} toc:nil author:nil email:nil \\n:t")
  (org-msg-greeting-name-limit 3)
  (org-msg-greeting-fmt "\nHi *%s*,\n\n")
  ;; (org-msg-default-alternatives (text html))
  (org-msg-convert-citation t)
  (org-msg-startup "hidestars indent inlineimages")
  ;; (org-msg-signature "\n\nBest Regards,\n黄孝江 产品经理\n美的集团智能化创新中心")
  )
#+end_src
** mu4e key bindings
| key           | description                                   |
|---------------+-----------------------------------------------|
| n, p          | view the next, previous message               |
| ], [          | view the next, previous unread messages       |
| SPC           | scroll down                                   |
| S-SPC         | scroll up                                     |
|---------------+-----------------------------------------------|
| Searching     |                                               |
|---------------+-----------------------------------------------|
| s             | search                                        |
| e             | edit last query                               |
| =/=             | narrow the search                             |
| b             | search bookmark                               |
| j             | jump to maildir                               |
| M-left        | previous query                                |
| M-right       | next query                                    |
|---------------+-----------------------------------------------|
| marking       |                                               |
|---------------+-----------------------------------------------|
| d             | mark for moving to trash folder               |
| ===             | mark for removing trash flag                  |
| D             | mark for complete deletion                    |
| m             | mark for moving to another maildir folder     |
| r             | mark for refiling                             |
| +, -          | mark for flagging/unflagging                  |
| u             | unmark message at point                       |
| U             | unmark all messages                           |
| %             | mark based on regular expression              |
| T             | mark whole thread                             |
| x             | execute actions                               |
|---------------+-----------------------------------------------|
| composition   |                                               |
|---------------+-----------------------------------------------|
| R,F,C         | reply/forward/compose                         |
| E             | edit (only allowed for draft messages)        |
| C-c C-a       | =mml-attach-file:= attach a file                |
| C-d C-d       | save as draft, =E= to edit a draft              |
|---------------+-----------------------------------------------|
| actions       |                                               |
|---------------+-----------------------------------------------|
| g             | go to numbered URL                            |
| C-u g         | visit multiple URLs                           |
| e             | extract one or more attachment                |
| o             | open attachment                               |
| a             | execute some custome action on the message    |
| A             | execute some custom action on attachment      |
|---------------+-----------------------------------------------|
| misc          |                                               |
|---------------+-----------------------------------------------|
| ;             | switch context                                |
| c             | copy address at point                         |
| h             | toggle html/text                              |
| w             | toggle line wrapping                          |
| #             | toggle show/hide cited parts                  |
| v             | show details about cryptographic signiture    |
| .             | show the raw message view. 'q' takes you back |
| C-+, C--      | increase/decrease number of headers shown     |
| H             | get help                                      |
| C-S-u/C-c C-u | update mail & reindex                         |
| q             | leave the message view                        |
** mu4e tips
*** Search
Use =M-x mu4e-headers-search= command to search email everywhere. Use =M-x mu4e-headers-search-bookmark= to search bookmarks everywhere.

Following is a search example for keyword "meeting", sender contains "imip", has attachments, date range is March.
#+begin_example
meeting and from:imip flag:attach date:2021/03
#+end_example
*** Compose
Use =M-x mu4e-compose-new= command to compose new email
*** Fix "mu4e-error-handler: Error 1: cannot open database" problem
This is because mu has already been running. Need to stop mu first.
#+begin_src shell -n :file-name: temp.sh
# 1. kill mu
pkill -2 -u $UID mu

# 2. reinit
mu init --maildir=~/Mail/ --my-address=xiaojianghuang@126.com --my-address=huangxj73@midea.com

# 3. reindex
mu index
#+end_src

* RSS settings
** Newsticker
#+begin_src emacs-lisp -n
(use-package newsticker
  :ensure nil
  :bind ("\e\e n" . newsticker-treeview)
  :config
  (define-advice newsticker--cache-read (:around (func &rest args))
    "Read cache data without prompt."
    (cl-letf* (((symbol-function 'y-or-n-p) (lambda (_) t)))
      (apply func args)))
  :custom-face
  (newsticker-treeview-old-face ((nil (:inherit 'newsticker-treeview-face :foreground "#7c7c75"))))
  :custom
  ;; Keep obsolete items for a month
  (newsticker-keep-obsolete-items t)
  (newsticker-obsolete-item-max-age (* 30 86400))
  ;; Sane behavior
  (newsticker-automatically-mark-items-as-old nil)
  (newsticker-automatically-mark-visited-items-as-old t)
  ;; No logos
  (newsticker-download-logos nil)
  (newsticker-enable-logo-manipulations nil)
  ;; Emacs async sucks
  (newsticker-retrieval-method 'extern)
  ;; Improve the default display
  (newsticker-treeview-listwindow-height 20)
  (newsticker-treeview-date-format "%F %a, %H:%M  ")
  (newsticker-url-list-defaults nil)
  (newsticker-url-list '(
                         ("Planet Emacslife" "https://planet.emacslife.com/atom.xml")
                         ("喷嚏网" "http://www.dapenti.com/blog/rss2.asp?name=xilei")
                         ("少数派" "https://sspai.com/feed")
                         ("小众软件" "https://feeds.appinn.com/appinns/")
                         ("Mac志" "https://www.isofts.org/feed/")
                         ("Mac玩法" "http://www.waerfa.com/feed")
                         ("Mac限免" "http://free.apprcn.com/category/mac/feed/")
                         ("产品100" "http://www.chanpin100.com/feed")
                         ("Ideas" "https://www.wired.com/feed/category/ideas/latest/rss")
                         ("交互体验" "http://www.woshipm.com/category/ucd/feed")
                         ("产品运营" "http://www.woshipm.com/category/operate/feed")
                         ("产品经理" "http://www.woshipm.com/category/pmd/feed")
                         ("艾瑞报告" "http://www.iresearch.cn/common/rss/reports.xml")
                         ("LWN (Linux Weekly News)" "https://lwn.net/headlines/rss")
                         )))
#+end_src
** TODO Elfeed
* TODO org protocol & org-capture-extension
* TODO org-roam
* Useful tools
** Which-key
#+begin_src emacs-lisp
(use-package which-key
  :ensure t
  :hook (after-init . which-key-mode)
  :config
  (which-key-add-key-based-replacements
    "C-c !" "flycheck"
    "C-c @" "hideshow"
    "C-c i" "ispell"
    "C-c t" "hl-todo"
    "C-x a" "abbrev"
    "C-x n" "narrow"
    "C-x t" "tab")
  :custom
  (which-key-idle-delay 0.7)
  (which-key-add-column-padding 1))
#+end_src
** Avy, using Meta-s to quickly access defined char
#+begin_src emacs-lisp
(use-package avy
  :ensure t
  ;; integrate with isearch and others
  ;; C-' to select isearch-candidate with avy
  ;; :hook (after-init . avy-setup-default)
  :defer t
  :config
  ;; Force to use pre `avy-style'
  (define-advice avy-isearch (:around (func &rest args))
    (let ((avy-style 'pre))
      (apply func args)))
  :bind ("M-s" . avy-goto-char)
  :custom
  (avy-timeout-seconds 0.2)
  (avy-all-windows nil)
  (avy-background t)
  (avy-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l ?q ?w ?e ?r ?u ?i ?o ?p))
  )
#+end_src
** Crux, enhance C-a, C-c k
#+begin_src emacs-lisp
(use-package crux
  :ensure t
  :bind (("C-a" . crux-move-beginning-of-line)
         ("C-x 4 t" . crux-transpose-windows)
         ("C-x K" . crux-kill-other-buffers)
         ("C-k" . crux-smart-kill-line))
  :config
  (crux-with-region-or-buffer indent-region)
  (crux-with-region-or-buffer untabify)
  (crux-with-region-or-point-to-eol kill-ring-save)
  (defalias 'rename-file-and-buffer #'crux-rename-file-and-buffer))
#+end_src
** Hungry-delete
#+begin_src emacs-lisp
;; hungry-delete
(use-package hungry-delete
:ensure t
:bind (("\e\e [" . hungry-delete-backward)
         ("\e\e ]" . hungry-delete-forward)
         )
  )
#+end_src
** Popup kill ring
#+begin_src emacs-lisp
(use-package popup-kill-ring
  :ensure t
  :bind ("M-y" . popup-kill-ring))
#+end_src
** Smartparens
#+begin_src emacs-lisp
;; (use-package smartparens
;;   :ensure t
;;   :hook ((after-init . show-smartparens-global-mode)
;;          ((prog-mode org-mode) . smartparens-mode))
;;   :bind (:map smartparens-mode-map
;;               ;; paredit bindings
;;               ("C-M-n" . sp-forward-sexp)
;;               ("C-M-p" . sp-backward-sexp)
;;               ("C-M-d" . sp-down-sexp)
;;               ("C-M-u" . sp-backward-up-sexp)
;;               ;; ("C-M-b" . sp-up-sexp)
;;               ;; ("C-M-f" . sp-backward-down-sexp)
;;               ;; ("M-s" . sp-splice-sexp)
;;               ;; ("M-<up>" . sp-splice-sexp-killing-backward)
;;               ;; ("M-<down>" . sp-splice-sexp-killing-forward)
;;               ;; ("M-r" . sp-splice-sexp-killing-around)
;;               ;; ("M-(" . sp-wrap-round)
;;               ;; ("M-{" . sp-wrap-curly)
;;               ;; ("C-)" . sp-forward-slurp-sexp)
;;               ;; ("C-<right>" . sp-forward-slurp-sexp)
;;               ;; ("C-}" . sp-forward-barf-sexp)
;;               ;; ("C-<left>" . sp-forward-barf-sexp)
;;               ;; ("C-(" . sp-backward-slurp-sexp)
;;               ;; ("C-M-<left>" . sp-backward-slurp-sexp)
;;               ;; ("C-{" . sp-backward-barf-sexp)
;;               ;; ("C-M-<right>" . sp-backward-barf-sexp)
;;               ;; ("M-S" . sp-split-sexp)
;;               ;; ;; mine
;;               ;; ("C-M-k" . sp-kill-sexp)
;;               ;; ("C-M-w" . sp-copy-sexp)
;;               ;; ("M-@" . sp-mark-sexp)
;;               )
;;   :diminish smartparens-mode
;;   :init
;;   (setq ;; avoid slowness when editing inside a comment for modes with
;;         ;; parenthesized comments (e.g. coq)
;;         ;; sp-show-pair-delay 0.2
;;         sp-show-pair-from-inside nil
;;         sp-cancel-autoskip-on-backward-movement nil
;;         sp-highlight-pair-overlay nil
;;         sp-highlight-wrap-overlay nil
;;         sp-highlight-wrap-tag-overlay nil)
;;   :config
;;     ;;;;;;;;;;;;;;;;;;
;;   ;; pair management
;;   (sp-local-pair 'minibuffer-inactive-mode "'" nil :actions nil)
;;   (sp-local-pair 'web-mode "<" nil :when '(my/sp-web-mode-is-code-context))

;;   (defun my/sp-web-mode-is-code-context (id action context)
;;     (when (and (eq action 'insert)
;;                (not (or (get-text-property (point) 'part-side)
;;                         (get-text-property (point) 'block-side))))
;;       t))

;;   ;;; markdown-mode
;;   (sp-with-modes '(markdown-mode gfm-mode rst-mode)
;;     (sp-local-pair "*" "*")
;;     (sp-local-tag "2" "**" "**")
;;     (sp-local-tag "s" "```scheme" "```")
;;     (sp-local-tag "<"  "<_>" "</_>" :transform 'sp-match-sgml-tags))

;;   ;;; tex-mode latex-mode
;;   (sp-with-modes '(tex-mode plain-tex-mode latex-mode)
;;     (sp-local-tag "i" "1d5f8e69396c521f645375107197ea4dfbc7b792quot;<" "1d5f8e69396c521f645375107197ea4dfbc7b792quot;>"))

;;   ;;; html-mode
;;   (sp-with-modes '(html-mode sgml-mode web-mode)
;;     (sp-local-pair "<" ">"))

;;   ;;; lisp modes
;;   (sp-with-modes sp--lisp-modes
;;     (sp-local-pair "(" nil
;;                    :pre-handlers '(my-add-space-before-sexp-insertion)
;;                    :post-handlers '(my-add-space-after-sexp-insertion)))

;;   (defun my-add-space-after-sexp-insertion (id action _context)
;;     (when (eq action 'insert)
;;       (save-excursion
;;         (forward-char (sp-get-pair id :cl-l))
;;         (when (or (eq (char-syntax (following-char)) ?w)
;;                   (looking-at (sp--get-opening-regexp)))
;;           (insert " ")))))

;;   (defun my-add-space-before-sexp-insertion (id action _context)
;;     (when (eq action 'insert)
;;       (save-excursion
;;         (backward-char (length id))
;;         (when (or (eq (char-syntax (preceding-char)) ?w)
;;                   (and (looking-back (sp--get-closing-regexp))
;;                        (not (eq (char-syntax (preceding-char)) ?'))))
;;           (insert " ")))))

;;   ;;; org modes
;;   (sp-with-modes 'org-mode
;;     (sp-local-pair "=" "="))
;;   )

;; (use-package smartparens-config
;;   :after smartparens
;;   :config
;;   ;; don't create a pair with single quote in minibuffer
;;   (sp-local-pair 'minibuffer-inactive-mode "'" nil :actions nil)

;;   ;; indent after inserting any kinds of parens
;;   (defun my/smartparens-pair-newline-and-indent (id action context)
;;     (save-excursion
;;       (newline)
;;       (indent-according-to-mode))
;;     (indent-according-to-mode))
;;   (sp-pair "(" nil :post-handlers
;;            '(:add (my/smartparens-pair-newline-and-indent "RET")))
;;   (sp-pair "{" nil :post-handlers
;;            '(:add (my/smartparens-pair-newline-and-indent "RET")))
;;   (sp-pair "[" nil :post-handlers
;;            '(:add (my/smartparens-pair-newline-and-indent "RET")))
;;   )
#+end_src
** highlight parentheses
This is an alternative to smartparens.
#+begin_src emacs-lisp
(use-package paren
  :ensure nil
  :hook (after-init . show-paren-mode)
  :custom
  (show-paren-when-point-inside-paren t)
  (show-paren-when-point-in-periphery t))
#+end_src
** Undo tree
#+begin_src emacs-lisp
(use-package undo-tree
  :ensure t
  :init
  (global-undo-tree-mode)
  )
#+end_src
** Beacon mode
Highlight the current cursor when scrolling.
#+begin_src emacs-lisp
(use-package beacon
  :ensure t
  :init
  (beacon-mode 1)
  )
#+end_src
** Large file support
#+begin_src emacs-lisp
;; Open very large files
(use-package vlf-setup
  :ensure vlf)
#+end_src
** Expand region
#+begin_src emacs-lisp
; expand the marked region in semantic increments (negative prefix to reduce region)
(use-package expand-region
  :ensure t
  :config
  (global-set-key (kbd "C-=") 'er/expand-region)
  )
#+end_src
** Multiple cursors
#+begin_src emacs-lisp
(use-package multiple-cursors
  :ensure t
  :bind
  (("C-c m t" . mc/mark-all-like-this)
   ("C-c m m" . mc/mark-all-like-this-dwim)
   ("C-c m l" . mc/edit-lines)
   ("C-c m e" . mc/edit-ends-of-lines)
   ("C-c m a" . mc/edit-beginnings-of-lines)
   ("C-c m n" . mc/mark-next-like-this)
   ("C-c m p" . mc/mark-previous-like-this)
   ("C-c m s" . mc/mark-sgml-tag-pair)
   ("C-c m d" . mc/mark-all-like-this-in-defun))
)
#+end_src
** Spell check
#+begin_src emacs-lisp
(use-package ispell
  :ensure nil
  ;; :bind (("C-c i c" . ispell-comments-and-strings)
  ;;        ("C-c i p" . ispell-comment-or-string-at-point)
  ;;        ("C-c i k" . ispell-kill-ispell)
  ;;        ("C-c i m" . ispell-message)
  ;;        ("C-c i r" . ispell-region))
  :config
  ;; MacOS is broken
  (when (eq system-type 'darwin)
    (setenv "DICTIONARY" "en_US"))

  ;; no spell checking for org special blocks
  (add-to-list 'ispell-skip-region-alist '(":\\(PROPERTIES\\|LOGBOOK\\):" . ":END:"))
  (add-to-list 'ispell-skip-region-alist '("#\\+begin_src" . "#\\+end_src"))
  (add-to-list 'ispell-skip-region-alist '("#\\+begin_example" . "#\\+end_example"))
  :custom
  (ispell-really-hunspell t)
  ;; need to brew install hunspell first and install dictionary into ~/Library/Spelling
  (ispell-program-name "hunspell")
  (ispell-dictionary "en_US")
  (ispell-following-word t)
  (ispell-personal-dictionary (expand-file-name "hunspell_dict.txt" user-emacs-directory)))

(use-package flyspell
  :ensure nil
  :defer t
  :hook (((text-mode markdown-mode). (lambda () (flyspell-mode 1)))
         ((prog-mode python-mode) . (lambda () (flyspell-prog-mode)))
         )
  :custom
  ;; Use M-C-i instead if M-TAB is shadowed by your window manager
  (flyspell-use-meta-tab t)
  (flyspell-issue-welcome-flag nil)
  (flyspell-issue-message-flag nil))

;; check and correct words via popup box
(use-package flyspell-popup
  :ensure t
  :bind (:map flyspell-mode-map
              ("C-;" . flyspell-popup-correct)
              ;; ("<return>" . newline)
              )
  )
#+end_src
** Rainbow delimiters
#+begin_src emacs-lisp
(use-package rainbow-delimiters
  :ensure t
  :hook (prog-mode . rainbow-delimiters-mode))
#+end_src
** Dashboard
#+begin_src emacs-lisp
(use-package dashboard
  :ensure t
  :diminish (dashboard-mode page-break-lines-mode)
  :hook ((after-init . dashboard-setup-startup-hook)
         (dashboard-mode . (lambda ()
                             (setq-local display-line-numbers-mode nil))))
  :bind
  (;; ("C-z d" . open-dashboard)
   :map dashboard-mode-map
   (
    ;; ("n" . dashboard-next-line)
    ;; ("k" . nil) ;; a way to unbind key via :bind
    ;; ("p" . dashboard-previous-line)
    ;; ("j" . dashboard-jump-to-projects)
    ;; ("N" . dashboard-next-section)
    ;; ("F" . dashboard-previous-section)
    ))
  :config
  ;; (custom-set-variables
  ;;  '(dashboard-item-shortcuts '((recents . "r")
  ;;                               (bookmarks . "m")
  ;;                               (projects . "j")
  ;;                               (agenda . "a")
  ;;                               (registers . "e"))))
  ;; (unbind-key "p" dashboard-mode-map) ;; a way to unbind key

  ;; show Dashboard in frames created with emacsclient -c
  (if (daemonp)
      (setq initial-buffer-choice (lambda () (get-buffer dashboard-buffer-name))))

  ;; To use it with counsel-projectile
  (setq dashboard-projects-switch-function 'counsel-projectile-switch-project-by-name)

  ;; show agenda all or for the upcoming seven days
  (setq dashboard-filter-agenda-entry 'dashboard-no-filter-agenda)
  ;; (setq dashboard-week-agenda t)
  :custom
  (dashboard-startup-banner 'logo)
  (dashboard-set-heading-icons t)
  (dashboard-set-file-icons t)
  (dashboard-set-init-info t)
  (dashboard-set-navigator t)
  (dashboard-items '((agenda    . 10)
                     (recents   . 5)
                     (projects  . 5)
                     (bookmarks . 2)))
  (dashboard-navigator-buttons
   (if (featurep 'all-the-icons)
       `(((,(all-the-icons-octicon "mark-github" :height 1.1 :v-adjust -0.05)
           "My Emacs Github" "Browse My EMACS Homepage"
           (lambda (&rest _) (browse-url "https://github.com/wowhxj/.emacs.d")))
          (,(all-the-icons-fileicon "elisp" :height 1.0 :v-adjust -0.1)
           "Emacs Configuration" "" (lambda (&rest _) (open-emacsconfig)))
          (,(all-the-icons-faicon "cogs" :height 1.0 :v-adjust -0.1)
           "Update packages" "" (lambda (&rest _) (auto-package-update-now)))))
     `((("" "My Emacs Github" "Browse My EMACS Homepage"
         (lambda (&rest _) (browse-url "https://github.com/wowhxj/.emacs.d")))
        ("" "Emacs Configuration" "" (lambda (&rest _) (open-emacsconifg)))
        ("" "Update packages" "" (lambda (&rest _) (auto-package-update-now)))))))
  )
#+end_src
** Yasnippet
#+begin_src emacs-lisp
(use-package yasnippet
  :diminish yas-minor-mode
  :init
  (use-package yasnippet-snippets :ensure t :after yasnippet)
  :hook ((prog-mode LaTeX-mode) . yas-minor-mode) ;; for org-mode, we have tempo
  ;; :bind
  ;; ;; (:map yas-minor-mode-map ("C-c C-n" . yas-expand-from-trigger-key))
  ;; (:map yas-keymap
  ;;       (("TAB" . smarter-yas-expand-next-field)
  ;;        ([(tab)] . smarter-yas-expand-next-field)))
  :config
  (yas-reload-all)
  (setq yas-prompt-functions '(yas-x-prompt yas-dropdown-prompt))
  (defun smarter-yas-expand-next-field ()
    "Try to `yas-expand' then `yas-next-field' at current cursor position."
    (interactive)
    (let ((old-point (point))
          (old-tick (buffer-chars-modified-tick)))
      (yas-expand)
      (when (and (eq old-point (point))
                 (eq old-tick (buffer-chars-modified-tick)))
        (ignore-errors (yas-next-field))))))
#+end_src
** Command log mode
Use =command-log-mode= for live streams and screencasts.
#+begin_src emacs-lisp -n
(use-package command-log-mode
  :ensure t
  :commands command-log-mode)
#+end_src
** Helpful help commands
Helpful adds a lot of very helpful (get it?) information to Emacs’ describe- command buffers.
#+begin_src emacs-lisp -n
(use-package helpful
  :ensure t
  :commands (helpful-callable helpful-variable helpful-command helpful-key)
  :custom
  (counsel-describe-function-function #'helpful-callable)
  (counsel-describe-variable-function #'helpful-variable)
  :bind
  ([remap describe-function] . counsel-describe-function)
  ([remap describe-command] . helpful-command)
  ([remap describe-variable] . counsel-describe-variable)
  ([remap describe-key] . helpful-key))
#+end_src
* OSX specified
** dictionary
#+begin_src emacs-lisp
;; The builtin dictionary app in MacOS
(when sys/macp
  (use-package osx-dictionary
    :ensure t
    :commands osx-dictionary-search-word-at-point
    :bind (("\e\e d" . osx-dictionary-search-word-at-point)
           ;; ("C-c i" . osx-dictionary-search-input)
           )
    ))
#+end_src
* Global key settings
#+begin_src emacs-lisp
;; ESC-ESC-i to open index.org
(global-set-key (kbd "\e\ei")
                (lambda () (interactive) (find-file "~/org/index.org")))

;; ESC-ESC-e to open emacs-config.org
(global-set-key (kbd "\e\ee")
                (lambda () (interactive) (open-emacsconfig)))

;; ESC-ESC-f to use rg to search in org file
(global-set-key (kbd "\e\ef")
                (lambda () (interactive) (counsel-rg nil org-directory)))

;; ESC-ESC-c to capture
(global-set-key (kbd "\e\ec")
                (lambda () (interactive) (org-capture)))

;; ESC-ESC-a to show agenda
(global-set-key (kbd "\e\ea")
                (lambda () (interactive) (org-agenda)))

;; ESC-ESC-b to open eaf browser
(global-set-key (kbd "\e\eb")
                (lambda () (interactive) (eaf-open-browser-with-history)))
#+end_src
